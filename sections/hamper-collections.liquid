{{ 'hamper-collections.css' | asset_url | stylesheet_tag }}
{% comment %} Render the warning Popup and Product Image Popup on BYOH by default .It is display none. 07-07-2025 Added by Velocity {% endcomment %}
{% render 'byoh-warning-alert' %}
    {% render 'byoh-product-image' %}
{% if page.handle == 'hamper-collections' %}
{% assign default_collection = "" %}
<style>
  .data-boxquant-hide{
     display:none !important;
  }
  #smile-ui-lite-launcher-frame-container{
    display:none !important;
  }

  @media (max-width: 565px) {
  .price .price-item.price-item--sale{
    line-height: 20px;
    font-style: normal;
    font-weight: 600;
    font-size: 16px;
   font-family: var(--font-text);
  }

  .price.price--on-sale .price-item.price-item--sale.price-item--last,
  .price.price--on-sale .price-item.price-item--regular {
    font-size: 10px;
    margin-right: 0;
    display: block;
    width: 100%;
    text-align: center;
  }
  .price:not(.price--on-sale) .price-item.price-item--regular {
    min-height: 40px;
  }
  }
  .product_tag{
    display:none;
  }
  
</style>
<script>
    
  function renderProduct(varient_id, loder_id, isRemoved = 0, tag='') {

    let list = document.getElementById("selectproduct");
    $("#selectproduct").empty();
    $('#add_row').empty();
    $('#mobile_cart_data').empty();
    totalprice = 0;
    selectedItem.forEach((item, index) => {
      let val = $(`.${item.item_var_id} .qty`).val();
      if(val == undefined && parseInt(item.available_quantity)>0) {
        val = parseInt(item.available_quantity);
      }
      let producttp = item.price * 0.01;
      let quant = '<input type="text" name="qty" value="1" class="qty static_qty"/>'
      if (Number(val)) {
        let lastqunt = Number(val)
        producttp = (item.price * Number(val)) * 0.01;
        if (isliquor) {
          if (item.item_var_id == "44337026629939" || item.item_var_id == "44337026498867" || item.item_var_id == "44337026302259") {
            totalprice = totalprice + (item.price * numberOfLiuor);
          } else {
            totalprice = totalprice + (item.price * val);
          }
        } else {
          totalprice = totalprice + (item.price * val);
        }
        quant = `<div class="qty_selector ${item.item_var_id} variant-${item.item_var_id}">
                                      <span onclick='quantitySelector(${item.item_var_id},${item.item_var_id},1,0,0,0,0)'>-</span>
                                      <input type="text" name="qty" value="${lastqunt}" class="qty" onchange='quantitySelector(${item.item_var_id},${item.item_var_id},1,0,0,0,0,true)' />
                                      <span onclick='quantitySelector(${item.item_var_id},${item.item_var_id},1,0,0,0,1)'>+</span>
                                    </div>`
      } else {
        if (isliquor) {
          if (item.item_var_id == "44337026629939" || item.item_var_id == "44337026498867" || item.item_var_id == "44337026302259") {
            totalprice = totalprice + (item.price * numberOfLiuor);
          } else {
            totalprice = totalprice + item.price;
          }
        } else {
          totalprice = totalprice + item.price;
        }
      }
      let prsc = item.price * 0.01;
      let li = document.createElement("li");
      li.id = "bottom_cart_item_" + item.item_var_id;
      if (index + 1 >= 25) li.style.display = "inline";
      li.innerHTML = `<div class="item-details">
                                  <div class="item-img">
                                    <img src="${item.img}"
                                        class="cart-item__image"
                                        alt="img"
                                        loading=1"lazy">
                                  </div>
                                  <div class="item-title">
                                    <p>${item.title}</p>
                                    <p>&#x20b9;${prsc}</p>
                                  </div>
                                  ${quant}
                                  <div class="item-remove_btn">
                                    
                                      <button class="remove_btn"  onclick="removeFromCart(${item.item_var_id},${item.item_var_id},1,0,0)">Remove</button>
                                  </div>
                                </div>`;
      list.appendChild(li);
      let cartPrice = `${item.price}`;
      cartPrice = cartPrice * 0.01;
      if (isliquor) {
        if (item.item_var_id == "44337026629939" || item.item_var_id == "44337026498867" || item.item_var_id == "44337026302259") {
          producttp = cartPrice * numberOfLiuor
        }
      }
      if (isliquor) {
        if (item.item_var_id == "44337026629939" || item.item_var_id == "44337026498867" || item.item_var_id == "44337026302259") {
          $('#add_row').append(`<tr id="main_bundle_checkout_${item.item_var_id}">
                                    <td>
                                      <div class="priduct-card">
                                        <div class="pd-img">
                                          <img
                                            src="${item.img}"
                                            class="cart-item__image"
                                            alt=""
                                            loading="lazy"
                                            width="150"
                                            height="150"
                                          >
                                        </div>
                                        <div class="pd-details">
                                          
                                          <div class="pd-title">
                                            <a
                                              href="#"
                                              class="cart-item__name h4 break"
                                              >${item.title}</a
                                            >
                                            {% comment %}
                                            <p class="current_bundle_data_id">bundle_id: ${window.currentBundleData.bundle_id}</p>
                                            <p class="current_bundle_data_name">bundle_name: ${window.currentBundleData.bundle_name}</p>
                                            {% endcomment %}
                                          </div>
                                        </div>
                                      </div>
                                    </td>
                                    <td><span class="price"> &#x20b9;${cartPrice}</span></td>
                                    <td>
                                    </td>
                                    <td><span class="subtotle"> &#x20b9;${producttp}</span></td>
                                    <td>
                                    </td>
                                </tr>`);
        } else {
          if (item.isABox) {
            $('#add_row').append(`<tr id="main_bundle_checkout_${item.item_var_id}">
                                <td>
                                  <div class="priduct-card">
                                    <div class="pd-img">
                                      <img
                                        src="${item.img}"
                                        class="cart-item__image"
                                        alt=""
                                        loading="lazy"
                                        width="150"
                                        height="150"
                                      >
                                    </div>
                                    <div class="pd-details">
                                      
                                      <div class="pd-title">
                                        <a
                                          href="#"
                                          class="cart-item__name h4 break"
                                          >${item.title}</a
                                        >
                                        {% comment %}
                                        <p class="current_bundle_data_id">bundle_id: ${window.currentBundleData.bundle_id}</p>
                                        <p class="current_bundle_data_name">bundle_name: ${window.currentBundleData.bundle_name}</p>
                                        {% endcomment %}
                                      </div>
                                    </div>
                                  </div>
                                </td>
                                <td><span class="price"> &#x20b9;${cartPrice}</span></td>
                                <td>
                                </td>
                                <td><span class="subtotle"> &#x20b9;${producttp}</span></td>
                                <td>
                                  <span class="delete_image"
                                    ><img data-del-var-id="${item.item_var_id}" data-del-prod-id="${item.itemProdId}" data-is-a-gift="${item.isAGift}" data-is-a-box="${item.isABox}" data-is-a-addon="${item.isAAddon}" data-is-a-card="${item.isACard}" src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/oie_5fGcRAnE5Pgg.png?v=1680761338"
                                  ></span>
                                </td>
                              </tr>`);
          } else {
            $('#add_row').append(`<tr id="main_bundle_checkout_${item.item_var_id}">
                                <td>
                                  <div class="priduct-card">
                                    <div class="pd-img">
                                      <img
                                        src="${item.img}"
                                        class="cart-item__image"
                                        alt=""
                                        loading="lazy"
                                        width="150"
                                        height="150"
                                      >
                                    </div>
                                    <div class="pd-details">
                                      
                                      <div class="pd-title">
                                        <a
                                          href="#"
                                          class="cart-item__name h4 break"
                                          >${item.title}</a
                                        >
                                        {% comment %}
                                        <p class="current_bundle_data_id">bundle_id: ${window.currentBundleData.bundle_id}</p>
                                        <p class="current_bundle_data_name">bundle_name: ${window.currentBundleData.bundle_name}</p>
                                        {% endcomment %}
                                      </div>
                                    </div>
                                  </div>
                                </td>
                                <td><span class="price"> &#x20b9;${cartPrice}</span></td>
                                <td>${quant}
                                </td>
                                <td><span class="subtotle"> &#x20b9;${producttp}</span></td>
                                <td>
                                  <span class="delete_image"
                                    ><img data-del-var-id="${item.item_var_id}" data-del-prod-id="${item.itemProdId}" data-is-a-gift="${item.isAGift}" data-is-a-box="${item.isABox}" data-is-a-addon="${item.isAAddon}" data-is-a-card="${item.isACard}" src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/oie_5fGcRAnE5Pgg.png?v=1680761338"
                                  ></span>
                                </td>
                              </tr>`);
          }
        }
      } else {
        if (item.isABox) {
          $('#add_row').append(`<tr id="main_bundle_checkout_${item.item_var_id}">
                                <td>
                                  <div class="priduct-card">
                                    <div class="pd-img">
                                      <img
                                        src="${item.img}"
                                        class="cart-item__image"
                                        alt=""
                                        loading="lazy"
                                        width="150"
                                        height="150"
                                      >
                                    </div>
                                    <div class="pd-details">
                                      
                                      <div class="pd-title">
                                        <a
                                          href="#"
                                          class="cart-item__name h4 break"
                                          >${item.title}</a
                                        >
                                        {% comment %}
                                        <p class="current_bundle_data_id">bundle_id: ${window.currentBundleData.bundle_id}</p>
                                        <p class="current_bundle_data_name">bundle_name: ${window.currentBundleData.bundle_name}</p>
                                        {% endcomment %}
                                      </div>
                                    </div>
                                  </div>
                                </td>
                                <td><span class="price"> &#x20b9;${cartPrice}</span></td>
                                <td>
                                </td>
                                <td><span class="subtotle"> &#x20b9;${producttp}</span></td>
                                <td>
                                  <span class="delete_image"
                                    ><img data-del-var-id="${item.item_var_id}" data-del-prod-id="${item.itemProdId}" data-is-a-gift="${item.isAGift}" data-is-a-box="${item.isABox}" data-is-a-addon="${item.isAAddon}" data-is-a-card="${item.isACard}" src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/oie_5fGcRAnE5Pgg.png?v=1680761338"
                                  ></span>
                                </td>
                              </tr>`);
        } else {
          $('#add_row').append(`<tr id="main_bundle_checkout_${item.item_var_id}">
                                <td>
                                  <div class="priduct-card">
                                    <div class="pd-img">
                                      <img
                                        src="${item.img}"
                                        class="cart-item__image"
                                        alt=""
                                        loading="lazy"
                                        width="150"
                                        height="150"
                                      >
                                    </div>
                                    <div class="pd-details">
                                      
                                      <div class="pd-title">
                                        <a
                                          href="#"
                                          class="cart-item__name h4 break"
                                          >${item.title}</a
                                        >
                                        {% comment %}
                                        <p class="current_bundle_data_id">bundle_id: ${window.currentBundleData.bundle_id}</p>
                                        <p class="current_bundle_data_name">bundle_name: ${window.currentBundleData.bundle_name}</p>
                                        {% endcomment %}
                                      </div>
                                    </div>
                                  </div>
                                </td>
                                <td><span class="price"> &#x20b9;${cartPrice}</span></td>
                                <td>${quant}
                                </td>
                                <td><span class="subtotle"> &#x20b9;${producttp}</span></td>
                                <td>
                                  <span class="delete_image"
                                    ><img data-del-var-id="${item.item_var_id}" data-del-prod-id="${item.itemProdId}" data-is-a-gift="${item.isAGift}" data-is-a-box="${item.isABox}" data-is-a-addon="${item.isAAddon}" data-is-a-card="${item.isACard}" src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/oie_5fGcRAnE5Pgg.png?v=1680761338"
                                  ></span>
                                </td>
                              </tr>`);
        }
      }
      $('#mobile_cart_data').append(`<div class="product-cart">
                            <div class="img">
                              <img
                                src="${item.img}"
                                class="cart-item__image"
                                alt="${item.title}"
                                loading="lazy"
                                width="150"
                                height="150"
                              >
                            </div>
                            <div class="text">
                              <h3 class="title">
                                <a href="/products/${item.title}3" class="cart-item__name h4 break"
                                  >${item.title}</a
                                >
                              </h3>
            
                              <h3 class="price">&#x20b9;${producttp}</h3>
                            ${quant}
                            </div>
                            <span class='delete_image'><img data-del-var-id="${item.item_var_id}" data-del-prod-id="${item.itemProdId}" data-is-a-gift="${item.isAGift}" data-is-a-box="${item.isABox}" data-is-a-card="${item.isACard}" data-is-a-addon="${item.isAAddon}"  src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/oie_5fGcRAnE5Pgg.png?v=1680761338"
                            ></span>
                          </div>`);
    });
    if (window.totalUserItemsCount > 15) {
      $("#hiddenItemsCount").text("and " + (window.totalUserItemsCount - 15) + " more items").show();
    } else {
      $("#hiddenItemsCount").text("").hide();
    }
    totalprice = totalprice*0.01 ;
    if (isRemoved) $(`.add_${varient_id}`).show();
    else $(`.remove_${varient_id}`).show();
    $(`.loader_${loder_id}`).hide();
    $(".total-price").text(totalprice);
    $(".total-price").prepend("&#8377;");
    $(".total-price1").text(totalprice);
    $(".total-price1").prepend("&#8377;");
    $("#SubTotalPrice").text(totalprice);
    $("#SubTotalPrice").prepend("&#8377;");
  }
  
   var hamperCollectionData;
  var displayChooseBoxProducts = false;
  var displayAddonProductsStatus = false;
    var isliquor = false;
  var liquirbagchange = false;
  var liquorCount = 0;
  var liquorBox = false;
  var numberOfLiuor = 0;
  var addedProductId = []
  var liquor_box_id = ""
  var liquor_bag_product_id = ''
  localStorage.setItem("bundle_products", "");
  localStorage.setItem("bundle_products_variant_id", "");
  
  $(".loader").hide()
  // let selectedItem = []
  let totalprice = 0.00;
  let firstelm = true;
  // var addToCartData = {};
  window.userAppliedDiscount = "", window.boxVarId = "", window.boxProdId = "";
  window.totalGiftItemsCount = 0, window.totalCardItemsCount = 0, window.totalUserItemsCount = 0, window.totalUserGiftItemsCount = 0, window.totalUserBoxItemsCount = 0, window.totalUserAddonItemsCount = 0;
  
    var addToCartData = {};

    // Initialize JavaScript variables
    window.totalUserGiftItemsCount = 0;
    window.totalUserBoxItemsCount = 0;
    window.totalGiftItemsCount = 0;
    window.selectedItem = [];
    window.addToCartData = {};

    {% for item in cart.items %}
    // Determine product type
    var productType = "{{ item.properties.product_type | default: '' }}";
    
    // Update counters based on product type
    {% if item.properties.product_type == 'gift' %}
        window.totalUserGiftItemsCount++;
        {% if isfirst %}
            window.totalGiftItemsCount += {{ item.quantity }};
        {% endif %}
    {% elsif item.properties.product_type == 'box' %}
        window.totalUserBoxItemsCount += 1;
    {% endif %}

    // Add to selectedItem if base_quantity exists
    {% if item.properties.base_quantity %}
        // Check if item already exists in selectedItem
        var existingIndex = window.selectedItem.findIndex(function(selected) {
            return selected.item_var_id === {{ item.variant_id }};
        });

        // Prepare new item
        var newItem = {
            img: "{{ item.image | default: '' }}",
            isAAddon: productType === 'addon' ? 1 : 0,
            isABox: productType === 'box' ? 1 : 0,
            isACard: productType === 'card' ? 1 : 0,
            isAGift: productType === 'gift' ? 1 : 0,
            itemProdId: {{ item.product_id }},
            item_var_id: {{ item.variant_id }},
            price: {{ item.price }},
            title: "{{ item.title }}",
            available_quantity: {{ item.properties.base_quantity | default: 0 }},
            base_quantity: {{ item.properties.base_quantity }}
        };

        // Update or push item to selectedItem
        if (existingIndex > -1) {
            // Override existing item
            window.selectedItem[existingIndex] = newItem;
        } else {
            // Add new item
            window.selectedItem.push(newItem);
        }

        console.log(window.selectedItem);

        // Add to addToCartData
        window.addToCartData["{{ item.variant_id }}"] = {
            quantity: {{ item.properties.base_quantity }},
            id: {{ item.variant_id }},
            properties: {
                bundle_id: "{{ currentBundleData.bundle_id }}",
                base_quantity: {{ item.properties.base_quantity }},
                bundle_name: '',
                product_type: productType
            }
        };

        // Render product
        renderProduct({{ item.variant_id }}, {{ item.product_id }}, 0);
    {% endif %}
{% endfor %}

</script>

  
  {% endif %}
<div class="loaderr">
  <div id="mccloader-wrapper">
    <img src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/logo-animation.gif?v=1689069773">
  </div>
</div>
{%- unless settings.cart_type == 'drawer' -%}
  <script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
{%- endunless -%}
<div class="popup">
  <div class="popup-content">
    <span class="close">&times;</span>
    <h2>Apply a discount code</h2>
    <input type="text" id="name-input">
    <button id="submit-btn">Submit</button>
    {% render 'discount-on-cart' %}
  </div>
</div>

<div class="api-result" style="display: none;">
  <section class="BYOH ">
    <!--
      <div class="offer_discount">
        <div class="one_moreProduct container">
          <h4>Add 1 more product to get additional 5% off</h4>
        </div>
      </div>
    -->
    <div class="top-tabs" style="display: none;">
      <div class="top-tabs-container">
        <a class="delivery_tab">
          <span
            class="custom_custsor font_bold deliveryFilters deliveryActive"
            data-filter-val="expressdel"
            data-filter-rival-val="standarddel"
            >24 Hours Delivery</span
          >
          <span
            class=" custom_font_bold custom_custsor deliveryFilters "
            data-filter-val="standarddel"
            data-filter-rival-val="expressdel"
            >Standard Delivery</span
          >
        </a>
        <span class="desglamor-text">For delivery within 24 hours</span>
      </div>
    </div>
    <div class="container custom_container">
      <div class="progress-wrap">
        <div class="line-progress-bar">
          <div class="line"></div>
          <ul class="checkout-bar">
            <li class="progressbar-steps ">
              <div class="progressbar-dots active prev-btn1">1</div>
              <span id="topChooseGiftsTitle"
                >Choose Gifts <br>
                (0)</span
              >
            </li>
            {% comment %}
            Added By Velocity - 29-07-2025 As per the TGS requirement we have combine the box and addon section.
            <li class="progressbar-steps">
              <div class="progressbar-dots next-btn1">2</div>
              <span>Choose Boxes</span>
            </li>
              
            {% endcomment %}
	    {%comment %}Added By Velocity - 29-07-2025 Combine the box and addon section.{% endcomment %}
            <li class="progressbar-steps">
              <div class="progressbar-dots next-btn2">2</div>
              <span
                >Choose Boxes & Addons</span
              >
            </li>
            <li class="progressbar-steps">
              <div class="progressbar-dots next-btn3">3</div>
              <span> Hamper Summary</span>
            </li>
          </ul>
        </div>
      </div>
      <style>.filter-container {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: right;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 10px;
        }

        #quantity_filter {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            width: 150px;
            transition: all 0.3s ease;
        }

        #quantity_filter:focus {
            outline: none;
            border-color: #000;
        }

        #quantity_filter_submit {
            padding: 10px 20px;
            border: none;
            background-color:#000;
            color: white;
            font-size: 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #quantity_filter_submit:hover {
            background-color: #0056b3;
        }</style>
      <div class="filter-container" style="display:none !important;">
        <input type="number" id="quantity_filter" name="quantity_filter" placeholder="Enter quantity...">
        <button id="quantity_filter_submit">Filter</button>
      </div>
      <div class="tab-content">
        <div class="tab-pane" id="step1">
          <div class="page slide-page">
            <div class="page-info">
              <h3 class="title" id="customChooseGiftTitle">
                Step 1 - Choose Gifts (0) <br>
                <small class="cp_product"> *Choose minimum 2 products</small>
              </h3>
              <div class="buttons">
            <button class="prefv-btn1 modal-toggle view_hamper">View Hamper</button>
                <!-- <button class="f-1 next next-btn1">Next</button> -->
                <button class="reset prefv-btn1">Reset</button>
              </div>
            </div>
            <div class="tabs">
              <div class="floating_box">
                <ul class="filters">
                  {% assign element_first = false %}
  
                  {% for headercollection in shop.metaobjects.hamper_header_collection.values %}
                    {% assign default_collection = headercollection.default_collection.value.handle %}
                    {% if headercollection.default_collection.value.handle %}
                      {% if element_first == false %}
                        <!-- Trigger fetchFilterProducts for the first collection -->
                        
                        {% assign element_first = true %}
                      {% endif %}
                    {% endif %}
                    
                    {% for hcoll in headercollection.header_collection.value %}
                      <li class="item" data-collection-id="{{ hcoll.id }}" data-collection-handle="{{ hcoll.handle }}">
                        <div class="sometime_box_2">
                          <div class="tabl-img-circle">
                            <img 
                              src="{{ hcoll.image.src | image_url: '300x300' | image_url }}" 
                              alt="{{ hcoll.title }}" 
                              class="img-responsive lazyload">
                          </div>
                          <div class="sub_heading sub_heading_hover_section">
                            <p>{{ hcoll.title }}</p>
                          </div>
                        </div>
                      </li>
                    {% endfor %}
                  {% endfor %}
                </ul>
              </div>
              <div class="card-container active" id="productcard1"></div>
              <div class="loader1" style="display: none;">
                <div id="mccloader-wrapper">
                  <div id="mccloader">
                    <div class="mccdot"></div>
                    <div class="mccdot"></div>
                    <div class="mccdot"></div>
                    <div class="mccdot"></div>
                    <div class="mccdot"></div>
                    <div class="mccdot"></div>
                    <div class="mccdot"></div>
                  </div>
                </div>
              </div>
           <div class="card-container active custom_load" id="perticular_collection">
  {% assign collection = collections[default_collection] %}
  {% if collection %}
    {% assign product_count = collection.products_count | times: 1 %}
    
    {% if product_count > 0 %}
      <!-- Set a large number for products per page to show all products -->
      {% assign products_per_page = 100 %}
      
      <!-- Paginate through products with a large number to show all -->
      {% paginate collection.products by products_per_page %}
          {% for product in collection.products %}
            {% assign nonveg = "" %}
            {% if product.tags contains "non-veg" %}
              {% assign nonveg = "<div class='nonveg-img'><img src='https://cdn.shopify.com/s/files/1/0689/3014/2515/files/non-veg-icon.svg?v=1691504652' alt='non-veg'></div>" %}
            {% endif %}

            {% assign price = product.variants.first.price | money_without_currency %}
            
            <!-- Check if product is in cart -->
            {% assign cart_item = ''%}
            {% assign is_in_cart = 0 %}
            
            <!-- Check if product is in cart -->
            {% assign cart_item = cart.items | where: 'variant_id', product.variants.first.id | first %}
            {% assign is_in_cart = cart_item.quantity | default: 0 %} 
            {% comment %} Addded by velocity 04-08-2025 Update bangalore inventory attribute {% endcomment %}
            <div data_mumbai="{{ product.metafields.custom.mumbai_inventory }}" data_kolkata="{{ product.metafields.custom.kolkata_inventory }}" data_gurgaon="{{ product.metafields.custom.gurgaon_inventory }}" data_delhi="{{ product.metafields.custom.delhi_inventory }}" data_bangalore="{{ product.metafields.custom.bangalore_inventory }}" class="product-card  {% unless product.tags contains 'Warehouse' %}content_hidden {{ product.tags | join: ' ' }}{% endunless %}" {% if product.tags contains 'express_delivery' %}data-express="express"{% endif %}{% if product.tags contains 'standard_delivery' %}data-standard="standard"{% endif %}">
              <p id="{{ product.variants.first.id }}_tag" class="product_tag">{{ product.tags | join: ',' }}</p>
              <!-- Product Image -->
              <div class="product-img">
	      {% comment %} When click on image open a popup contains products images. 07-07-2025 Updated by Velocity{% endcomment %}
                <img src="{{ product.featured_image | img_url: '330x330' }}" onclick="openProductPopup({{ product.images | json | escape }})" alt="{{ product.title }}">
              </div>
                {{ nonveg }}
              <!-- Product Title -->
              <h4 class="product-card-title">{{ product.title }}</h4>

              <!-- Product Price -->
              <h5 class="price" style="display:none;"><span>&#x20b9;{{price}}</span></h5>
              {% render 'price', product: product, price_class: '' %}

              <!-- Quantity Selector -->
              <div class="qty_selector {{ product.variants.first.id }} variant-{{ product.variants.first.id }}" style="{% if cart_item %}display:block;{% else %}display:none;{% endif %}"">
                <span onclick='quantitySelector("{{ product.variants.first.id }}", "{{ product.id }}", 1, 0, 0, 0, 0)'>-</span>
                <input type="text" name="qty" value="{% if cart_item %}{{ cart_item.properties.base_quantity }}{% else %}0{% endif %}" class="qty" onchange='quantitySelector("{{ product.variants.first.id }}", "{{ product.id }}", 1, 0, 0, 0, 0, true)' />
                <span onclick='quantitySelector("{{ product.variants.first.id }}", "{{ product.id }}", 1, 0, 0, 0, 1)'>+</span>
              </div>

              <!-- Add to Bag Buttons -->
              <div class="addToBag">
                <button type="button" onclick="addtocart('{{ product.variants.first.id }}', '{{ product.id }}', 1, 0, 0, 0)" 
                        class="add_{{ product.variants.first.id }} prodAddToBagBut" 
                        style="{% if cart_item %}display:none;{% else %}{% endif %}">ADD</button>
                
                <button type="button" onclick="removeFromCart('{{ product.variants.first.id }}', '{{ product.id }}', 1, 0, 0)" 
                        class="remove_{{ product.variants.first.id }} prodRemoveFromBagBut" 
                        style="{% if cart_item %}{% else %}display:none;{% endif %}">REMOVE</button>
                
                <div class="loader loader_{{ product.id }}" style="display:none;"> 
                  <span></span> 
                </div>
              </div>
            </div>
          {% endfor %}

      {% endpaginate %}
    {% else %}
      <p>No products found in this collection.</p>
    {% endif %}
  {% else %}
    <p>Collection not found.</p>
  {% endif %}
                
              </div>
            </div>
          </div>
        </div>
              {% comment %}
	      Added By Velocity - 29-07-2025 As per the TGS requirement we have combine the box and addon section. Merge step 2 with step 3
        <div class="tab-pane" id="step2">
          <div class="page">
            <div class="page-info">
              <h3 class="title">Step 2 - Choose Boxes</h3>
              <div class="buttons">
                <!-- <button class="prev prev-btn1">Previous</button> -->
                <!-- <button class="next next-btn2">Next</button> -->
                            <button class="prefv-btn1 modal-toggle view_hamper">View Hamper</button>
                <button class="reset">Reset</button>
              </div>
            </div>
          </div>
        </div>
              {% endcomment %}
        
        <div class="tab-pane" id="step3">
          <div class="page">
           {% comment %}Added By Velocity - 29-07-2025 As per the TGS requirement we have combine the box and addon section.{% endcomment %}
            <div class="page-info">
              <h3 class="title">Step 2 - Choose Boxes & Addons</h3>
              <div class="buttons">
                <!-- <button class="prev prev-btn2">Previous</button> -->
                <!-- <button class="next next-btn3">Next</button> -->
                            <button class="prefv-btn1 modal-toggle view_hamper">View Hamper</button>
                <button class="reset ">Reset</button>
              </div>
            </div>
	    {% comment %} Added by Velocity - 29-07-2025 Remove the Toggle Button from the step 3 and made card and addon button toggle {% endcomment %}
             <div class="top-tabs step3-tab">
              <div class="top-tabs-container">
                <a class="addons_tab">
                  <div class="custom_tab">
                    <span
                      class="font_bold custom_font_bold custom_font_boldsm custom_custsor  tablinks_custom byoh-addon-cards"
                      onclick="openTab(event, 'boxes')"
                      >Boxes</span
                    >
                    <span class=" custom_custsor tablinks_custom " onclick="openTab(event, 'cards')">Addons</span>
                    {% comment %}
                    <span
                      class="font_bold custom_font_bold custom_font_boldsm custom_custsor  tablinks_custom byoh-addon-cards"
                      onclick="openTab(event, 'cards')"
                      >Cards</span
                    >
                    <span
                      class=" custom_custsor custom_font_bold custom_font_boldsm tablinks_custom "
                      onclick="openTab(event, 'bows')"
                      >Bows</span
                    >
                    {% endcomment %}
                  </div>
                </a>
              </div>
            </div>
            <div id="boxes" class="tabcontent_custom" style="display: block;">
              <div class="card-container" id="product-card2"></div>
{% comment %} Added by Velocity - 29-07-2025 We are using only product-card3 for display all the products for addon section in a single page. {% endcomment %}
            </div>
            <div id="cards" class="tabcontent_custom" style="display: block;">
              <div class="card-container" id="product-card3"></div>
            </div>
            <div id="cards" class="tabcontent_custom" style="display: none;">
              <div class="card-container" id="product-card4"></div>
            </div>
            <div id="bows" class="tabcontent_custom" style="display: none;">
              <div class="card-container" id="product-card5"></div>
            </div>
          </div>
        </div>
        <div class="tab-pane" id="step4">
          <div class="page">
            <div class="page-info">
              <h3 class="title">Step 4 - Hamper Summary</h3>
              <div class="buttons">
                <button class=" prev prev-btn3">Previous</button>
                <button class="reset ">Reset</button>
              </div>
            </div>
            <div class="alert alert-danger cart_reset_alert_message" role="alert" style="
                  color: #721c24;
                  background-color: #f8d7da;
                  border-color: #f5c6cb;
                  position: relative;
                  padding: .75rem 1.25rem;
                  margin-bottom: 1rem;
                  border: 1px solid transparent;
                  border-radius: .25rem;display:none;">
                Items updated! Please reselect hamper quantity in Cart!
              </div>
            <div class="step-4">
              <h3 class="title">Hamper Contents</h3>
              <div class="product-table">
                <table>
                  <thead>
                    <tr>
                      <td>Product</td>
                      <td>Price</td>
                      <td>Qty</td>
                      <td>Subtotal</td>
                      <td>Action</td>
                    </tr>
                  </thead>
                  <tbody id="add_row">
                    <tr>
                      <td>
                        <div class="priduct-card">
                          <div class="pd-img">
                            <img
                              src="//cdn.shopify.com/s/files/1/0689/3014/2515/products/CUPCAKE_CREATIVE_2_2ff6c8a3-3a94-4921-9b72-e88b481abd3d.webp?v=1673964699&width=300"
                              class="cart-item__image"
                              alt=""
                              loading="lazy"
                              width="150"
                              height="150"
                            >
                          </div>
                          <div class="pd-details">
                            <button type="button" class="varient-id-checkout">44260912070963:1,</button>
                            <div class="pd-title">
                              <a
                                href="#"
                                class="cart-item__name h4 break"
                                >Kolkata Product 4</a
                              >
                            </div>
                          </div>
                        </div>
                      </td>
                      <td><span class="price"> &#x20b9;999</span></td>
                      <td><span class="qty">1</span></td>
                      <td><span class="subtotle"> &#x20b9;999</span></td>
                      <td>
                        <span class="delete_image"
                          ><img src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/oie_5fGcRAnE5Pgg.png?v=1680761338"
                        ></span>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <div class="table-footer">
                <div class="left">
                  <div class="btns">
                    <!-- <button>UPDATE CONTENTS</button> -->
                    <!-- <button type="button" class="apply_coupon">APPLY COUPON</button> -->
                   
                    <div class="message_feild">
                      <textarea
                        name="card_message_desktop"
                        placeholder="Add Greeting Card Message here...."
                        maxlength="200"
                        id="cardmessageid"
                      ></textarea>
                      <button>Submit</button>
                    </div>
                  </div>
                </div>
                <div class="table-footer_right_contain">
                  <div class="right">
                    <span>Sub Total</span>
                    <span class="total-price1">₹3,800</span>
                  </div>
                  <div class="right show_discount_price">
                    <span>Discount</span>
                    <span class="Discount_price"></span>
                  </div>
                  <div id="subTotal">
                    <span>
                      Total <br>
                      <small class="texes_included">Price inclusive of taxes </small>
                    </span>
                    <span id="SubTotalPrice">₹00</span>
                  </div>
                  <style>
                    .delivery-label {
                          text-align: left;
                          margin-bottom: 0px;
                    }
                    .cart-delivery-date{
                          max-width: 250px;
                          margin-left: auto;
                    }
                    .date-section{
                          height: 40px !important;
                    }
                    @media (max-width: 768px) {
                      .cart-delivery-date {
                          max-width: 100%;
                          background: #fff;
                          margin-bottom: 2px !important; /* Adjust margin for better spacing */
                          padding: 8px 12px; /* Reduce padding for a more compact look */
                          box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.08); /* Slightly reduce shadow intensity */
                      }
                  }

                  </style>
                  {% render 'byoh_web_datepicker' %}
                </div>
                
              </div>
             
              <div class="final_checkout byoh_checkout" style="text-align:right;" onclick="checkout()">
                <button>ADD TO CART</button>
              </div>
              <div class="final_checkout byoh_view_cart" style="text-align:right;display:none;" onclick="window.location.href='/cart';">
                <button>VIEW CART</button>
              </div>
            </div>
            <div class="step-4-mobil" id="mobile_cart_data"></div>
            <div class="mobil_msg_feild">
              <textarea name="card_message_mobile" placeholder="Drop Your Message Here...." maxlength="50"></textarea>
            </div>
            <div class="step-4-footer" style="display:none;">
              {% render 'byoh_mobile_datepicker' %}
              <div class="number-of-items">
                <div>
                  <h3>Total products: <span class="totalProductcount_class"></span></h3>
                </div>
                <div>
                  <h3>Sub Total: <span class="total-price1">380000</span></h3>
                  <h3 class="show_discount_price">Discount : <span class="Discount_price"> </span></h3>
                  <h3 class="ltttl">Total : <span id="SubTotalPricemb">₹00</span></h3>
                </div>
              </div>
              <div class="btns">
                <!-- <button>UPDATE CONTENTS</button> -->
                <!-- <button type="button" class="apply_coupon">APPLY COUPON</button> -->
              </div>
              <div class="checkout-box">
                <div class="final_checkout" onclick="checkout()"><button>ADD TO CART</button></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="order-details">
      <div class="container">
        <div class="new_order_details">
          <div class="view_box">
            <!-- <button class="view_btn modal-toggle"><strong>View Bundle Contents</strong></button> 
                            <button class="reset view_btn"><strong>Reset</strong></button> -->
			                    <button class="prev view_btn prev-btn1 prev_btn" style="display:none;"><strong>PREVIOUS</strong></button>


          </div>
          <div class="total">
            <span>Total</span>
            <h3 class="total-price"></h3>
          </div>
	  {% comment %} Added by Velocity - 29-07-2025 Remove one step from the BYOH follow we need to made the changes in previous and next button. {% endcomment %}
          <div class="next_btn_new">
            <button class="next-1 next order_next next-btn2" onclick="scrollToTop()"><strong>NEXT</strong></button>
          </div>
        </div>
      </div>
      <div class="triangle-5"></div>
    </div>
    <div class="modal">
      <div class="modal-overlay modal-toggle"></div>
      <div class="modal-wrapper modal-transition">
        <div class="modal-header">
          <button class="modal-close modal-toggle-close"><i class="fa-solid fa-xmark "></i></button>
        </div>

        <div class="modal-body">
          <div class="modal-content">
            <ul class="items" id="selectproduct"></ul>
            <span style="font-size: 12px;margin-left: 10px;display:none;" id="hiddenItemsCount"></span>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>
<div class="model_dl_change">
  <div class="dl_model_container">
    <span class="cross_dl" onclick="resetcartfun(0)">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M21 12C21 7.03125 16.9688 3 12 3C7.03125 3 3 7.03125 3 12C3 16.9688 7.03125 21 12 21C16.9688 21 21 16.9688 21 12Z" stroke="black" stroke-miterlimit="10"></path>
        <path d="M15 15L9 9M9 15L15 9" stroke="black" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
    </span>
    <p>Note: Your cart has express delivery items. If you switch the delivery type, your cart items will be removed.</p>
    <div class="btn_group">
      <button onclick="resetcartfun(1)">Ok</button>
      <button onclick="resetcartfun(0)">Cancel</button>
    </div>
  </div>
</div>
{% schema %}
{
  "name": "Hamper Collections",
  "class":"build_your_own_hamper",
  "tag":"section",
  "settings": [
    {
    "type": "text",
    "id": "custom_class_",
    "label": "Add custom class"
    }
  ],
  "presets": [
    {
      "name": "Hamper Collections",
      "category": "Custom"
    }
  ]
}
{% endschema %}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  var selected_date = '';

   $(document).on('click', '#quantity_filter_submit', function() {
    var quantityInput = $('#quantity_filter').val(); // Get input value
    var quantity = parseInt(quantityInput); // Convert to integer
    
    let productItems = document.querySelectorAll('.product-card');
   
    // Loop through all the product items
    productItems.forEach(function(item) {
        // Initialize inventory variable
        let inventory = 0;
        var setLocation = localStorage.getItem("location");
        
        // Access the inventory data from the item's dataset
        var inventory_mumbai = item.getAttribute('data_mumbai') || '';
        var inventory_kolkata = item.getAttribute('data_kolkata') || '';
        var inventory_gurgaon = item.getAttribute('data_gurgaon') || '';
        var inventory_bangalore = item.getAttribute('data_bangalore') || '';
       

        // Check the current location and get the inventory value for that location
        if(setLocation == 'location-mumbai') {
            console.log("Entered mumbai condition");
            inventory = inventory_mumbai;
        } else if(setLocation == 'location-kolkata') {
            inventory = inventory_kolkata;
        } else if(setLocation == 'location-gurgaon') {
            inventory = inventory_gurgaon;
        } else if(setLocation == 'location-bangalore') {
            inventory = inventory_bangalore;
        }
      
        // If the inventory is less than or equal to 0, remove the element from the DOM
        if (inventory === '' || parseInt(inventory) < quantity || isNaN(inventory)) {
            item.classList.add('hidden')
        } else {
          item.classList.remove('hidden')
        }
    });
});

  var globalUserLocation = localStorage.getItem("location"),
    loadedGiftProdIds = [],
    loadedSleeveProdIds = [],
    loadedBowsProdIds = [],
    loadedCardsProdIds = [];
  globalUserLocation = (globalUserLocation == null) ? "location-roi" : globalUserLocation;
  const urlParams = new URLSearchParams(window.location.search);
  const bundle_id = urlParams.get('bundle_id');
  if(bundle_id=='1015')
    var productsSortOrder = [ "Bombay Bhel Chikki Mini - 45g", "Ferrero Rocher T-4 50G", "Sapphire Fruit & Nut Chocolate Square Tin 90G", "Toblerone Yellow 100G Cd", "L Exclusif Mixed Fruit Dark Chocolate Bar 80G", "Indie Bar Celebration Box", "Super Crunch Chikki Mini - 45g", "L Exclusif Cranberry Dark Chocolate Bar 80G", "Mr Makhana Peri Peri Paradise 75Gm", "Natures Almond American 100G", "Natures Cashew Whole 240 100G", "Natures Pista Irani 100G", "Choco Almond Nutty Cookies Story Box", "Sleepy Owl Cold Coffee Salted Caramel Can 200Ml", "4700Bc Hawaiian Bbq Cheese Popcorn 75G", "Loacker Quadratini Creamkakao Wafer 125G", "Loacker Quadratini Dark Chocolate Wafer 125G", "Salsalito Classic Salted Nacho 150G", "Salsalito Cream Cheese Nacho 150G", "Pringles Sour Cream & Onion Chips 110G", "Matte Finish Cup Blue", "Matte Finish Cup Red", "Royal Queen Flamingo Decor", "Ceramic Unicorn Cup", "Chic Heart Hand Mirror", "Animal Design Trinket Plate", "Fly Weekly 7 Stud Earrings", "Hearts Stud Earrings", "Starry Disco Earrings", "AMBER JAR CANDLE", "Midnight Blue Candle", "SHOT JAR CANDLE", "Multi Color TIN CANDLE", "Taro Leaf Dip Bowl", "Sakura Moon Plate", "Inner Treasure Enthusiasm A5 Notebook", "Weekly Planner Floral Affair", "Inner Treasure Inspire A5 Notebook" ];
  else if(bundle_id=='1026')
    var productsSortOrder = [ "Organic Subah Rakhi", "Mystical Rakhi", "Splendour Rakhi", "Organic Butterfly Rakhi", "ChocoDate", "Occasion's Gift Box", "Nut Story", "Premium Dry Fruit Box", "Precious Moments Gift Box", "Sweet Moments Gift Box", "Color Fusion Rakhi", "Enchanted Rakhi", "Floral Splash Rakhi", "Grace Rakhi", "Bright Hue Rakhi", "Organic Bird Rakhi", "Organic Sangam Rakhi", "Pearly Find Rakhi", "Ferrero Rocher Gift Pack 200G (16 Pcs)", "Ferrero Rocher T-4 50G", "Sapphire Fruit & Nut Chocolate Square Tin 90G", "Toblerone Yellow 100G Cd", "L Exclusif Mixed Fruit Dark Chocolate Bar 80G", "Hersheys Exotic Dark Blueberry & Acai Chocolate 100G", "Kinder Joy Girls With Surprise 20G", "L Exclusif Cranberry Dark Chocolate Bar 80G", "Mr Makhana Peri Peri Paradise 75Gm", "Natures Almond American 100G", "Natures Cashew Whole 240 100G", "Natures Pista Irani 100G", "Choco Almond Nutty Cookies Story Box", "La Folie Darkchoco Seasalt Cookie 150Gm", "Sleepy Owl Cold Coffee Salted Caramel Can 200Ml", "4700Bc Hawaiian Bbq Cheese Popcorn 75G", "Loacker Quadratini Creamkakao Wafer 125G", "Loacker Quadratini Dark Chocolate Wafer 125G", "Salsalito Classic Salted Nacho 150G", "Salsalito Cream Cheese Nacho 150G", "Pringles Sour Cream & Onion Chips 110G", "Matte Finish Cup Blue", "Matte Finish Cup Red", "Royal Queen Flamingo Decor", "Ceramic Unicorn Cup", "Chic Heart Hand Mirror", "Animal Design Trinket Plate", "Fly Weekly 7 Stud Earrings", "Hearts Stud Earrings", "Starry Disco Earrings", "AMBER JAR CANDLE", "Midnight Blue Candle", "SHOT JAR CANDLE", "Multi Color TIN CANDLE", "Taro Leaf Dip Bowl", "Sakura Moon Plate", "Inner Treasure Enthusiasm A5 Notebook", "Weekly Planner Floral Affair", "Inner Treasure Inspire A5 Notebook" ];
  else
    var productsSortOrder = []
  productsSortOrder = productsSortOrder.reverse();
  productsSortOrder = productsSortOrder.map(item => item.toLowerCase());
  if (firstelm) {
    $(".item:first").addClass("active")
    $(".tab:first").addClass("active")
    firstelm = false;
  }
  
  function scrollToTop() {
    $('html, body').animate({
      scrollTop: $('.BYOH>.container.custom_container').offset().top
    }, 'slow');
  }

  async function fetchProductsByCollectionId(collectionHandleValue) {
    
  // Define the GraphQL query for the Storefront API
  const query = `
    query getProductsFromCollection($collectionHandle: String!) {
      collectionByHandle(handle: $collectionHandle) {
        products(first: 100) {
          edges {
            node {
              id
              title
              tags
              images(first: 10) {
                edges {
                  node {
                    src
                    altText
                  }
                }
              }
              variants(first: 1) {
                edges {
                  node {
                    id
                    price {
                      amount
                      currencyCode
                    }
                    availableForSale
                    compareAtPrice {
                      amount
                      currencyCode
                    }
                  }
                }
              }
               metafields(identifiers: [
            { key: "delhi_inventory", namespace: "custom" },
            { key: "gurgaon_inventory", namespace: "custom" },
            { key: "mumbai_inventory", namespace: "custom" },
            { key: "kolkata_inventory", namespace: "custom" }
            { key: "bangalore_inventory", namespace: "custom" }
          ]) {
            value
            key
          }
            }
          }
        }
      }
    }
  `;

  // Define the variables
  const variables = {
    collectionHandle : collectionHandleValue,
  };

  // Send the request to the Storefront API
  const response = await fetch('https://tgs-revamp.myshopify.com/api/2024-01/graphql.json', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Storefront-Access-Token': '22ad5e2c245acbd1b0f1a27dd3d369ac', // Use your API key here
    },
    body: JSON.stringify({ query, variables }) // Include variables in the request body
  });

  // Parse and return the response
  const data = await response.json();
  return data;
}



  
  function removeFromCart(varient_id, loder_id, isAGift = 0, isABox = 0, isAAddon = 0, isACard = 0) {
    if(varient_id){
         // const selector = `.qty_selector.${escapeClass(varient_id)}`;
         const selector = `.qty_selector.variant-${varient_id}`;

    // To only hide the qty button for the selected product not for all the products
$(selector).css('display', 'none');
    }
      $(".byoh_checkout").css('display','block');
      if ($(".byoh_view_cart").css('display') === 'block') {
          // If byoh_view_cart is display block, set it to none and cart_reset_alert_message to block
          $(".byoh_view_cart").css('display', 'none');
          $(".cart_reset_alert_message").css('display', 'block');
      } else {
          // Otherwise, set cart_reset_alert_message to none
          $(".cart_reset_alert_message").css('display', 'none');
      }

    if ($(`#gdId-${varient_id}`).hasClass('liquor')) {
      --liquorCount;
      if (!liquorCount) {
        isliquor = false
      }
      if (!liquorCount) {
        $(".boxId-44337026629939").hide();
        $(".boxId-44337026498867").hide();
        $(".boxId-44337026302259").hide();
      }
      numberOfLiuor = 0;
    }
    addedProductId = addedProductId.filter((item) => {
      return (item.varient_id !== varient_id)
    });
    $(`.remove_${varient_id}`).hide();
    $(`.loader_${loder_id}`).hide();
    // $.ajax({
    //   type: 'POST',
    //   url: '/cart/change.json',
    //   data: {
    //     quantity: 0,
    //     id: varient_id
    //   },
    //   dataType: 'json',
    //   success: function(data) {
         if(isAGift){
            window.totalGiftItemsCount -=addToCartData[''+varient_id].quantity;
          }
       
        delete addToCartData[''+varient_id];
        
        var alreadyAddedItems = localStorage.getItem("bundle_products");
        localStorage.setItem("bundle_products", alreadyAddedItems.replace(loder_id, ""));
    var alreadyAddedVariantId = localStorage.getItem("bundle_products_variant_id");
        localStorage.setItem("bundle_products_variant_id", alreadyAddedVariantId.replace(varient_id, ""));
        selectedItem = selectedItem.filter(product => parseInt(product.item_var_id) !== parseInt(varient_id));
        window.totalUserItemsCount -= 1;
        renderProduct(varient_id, loder_id, 1);
          console.log('Variant_removed'+varient_id);
        $("#main_bundle_checkout_" + varient_id).remove();
        $("#bottom_cart_item_" + varient_id).remove();
        if (isAGift) {
          $(`.${varient_id} .qty`).val('0');
          if (window.totalUserGiftItemsCount > 0) {
            window.totalUserGiftItemsCount -= 1;
            $("#customChooseGiftTitle").html(`Step 1 - Choose Gifts (${window.totalUserGiftItemsCount}) <br><small class='cp_product'> *Choose atleast ${window.currentBundleData.product_min_limit} product for your hamper.</small>`);
            $("#topChooseGiftsTitle").html(`<span>Choose Gifts <br> (${window.totalUserGiftItemsCount})</span>`);
          }
        } else if (isABox) {
          window.boxVarId = "", window.boxProdId = "";
          window.totalUserBoxItemsCount -= 1;
        } else {
          if (isACard) {
            new Promise((resolve, reject) => {
              window.totalCardItemsCount -= 1;
              window.totalUserAddonItemsCount -= 1;
              resolve();
            }).then(() => {
              if (window.totalCardItemsCount == 0) {
                $('.message_feild').hide();
                $('.mobil_msg_feild').hide();
              }
            })
          } else {
            window.totalUserAddonItemsCount -= 1;
          }
        }
    setDeliveryDate(selectedItem,selected_date);
    //   }
    // });
  }
  // To access the products qty selector using the numeric value
function escapeClass(cls) {
  cls = String(cls);
  return cls.replace(/([ !"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~])/g, '\\$1')
            .replace(/^(\d)/, '\\3$1 ');
}

  
  function addtocart(varient_id, loder_id, isAGift = 0, isABox = 0, isAAddon = 0, isACard = 0, quantity = 1) {
    /*
    * Added by Velocity
    * Added inventory check functionality when product is added to cart localStorage
    * 04-08-2025
    */
    
    // Inventory check before adding to cart
    const productCard = $(`.add_${varient_id}`).closest('.product-card');
    if (productCard.length > 0) {
      const currentLocation = localStorage.getItem('location');
      const dataMumbai = productCard.attr('data_mumbai') || '0';
      const dataKolkata = productCard.attr('data_kolkata') || '0';
      const dataGurgaon = productCard.attr('data_gurgaon') || '0';
      const dataDelhi = productCard.attr('data_delhi') || '0';
      const dataBangalore = productCard.attr('data_bangalore') || '0';
      
      let currentInventory = 0;
      
      // Get inventory for current location
      if (currentLocation === 'location-mumbai') {
        currentInventory = parseInt(dataMumbai) || 0;
      } else if (currentLocation === 'location-kolkata') {
        currentInventory = parseInt(dataKolkata) || 0;
      } else if (currentLocation === 'location-gurgaon') {
        currentInventory = parseInt(dataGurgaon) || 0;
      } else if (currentLocation === 'location-bangalore') {
        currentInventory = parseInt(dataBangalore) || 0;
      }
      
      // Check if inventory is sufficient
      if (currentInventory <= 0) {
        document.getElementById('warning-msg').textContent = "This product is currently out of stock.";
        document.getElementById("warning-popup").style.display = "block";
        document.getElementById("warning-overlay").style.display = "block";
        return false;
      }
      
      // Check if adding this quantity would exceed available inventory
      const existingQuantity = addToCartData[varient_id] ? addToCartData[varient_id].quantity : 0;
      const totalRequestedQuantity = existingQuantity + quantity;
      
      if (totalRequestedQuantity > currentInventory) {
        document.getElementById('warning-msg').textContent = `Only ${currentInventory} units are available.`;
        document.getElementById("warning-popup").style.display = "block";
        document.getElementById("warning-overlay").style.display = "block";
        return false;
      }
    }
    
    if(varient_id){
// const selector = `.qty_selector.${escapeClass(varient_id)}`;
      const selector = `.qty_selector.variant-${varient_id}`;

// To only show the qty button for the selected product not for all the products
$(selector).css('display', 'block');
    }
      $(".byoh_checkout").css('display','block');
      if ($(".byoh_view_cart").css('display') === 'block') {
        // If byoh_view_cart is display block, set it to none and cart_reset_alert_message to block
        $(".byoh_view_cart").css('display', 'none');
        $(".cart_reset_alert_message").css('display', 'block');
    } else {
        // Otherwise, set cart_reset_alert_message to none
        $(".cart_reset_alert_message").css('display', 'none');
    }

    if ($(`#gdId-${varient_id}`).hasClass('liquor')) {
      isliquor = true;
      liquorCount++;
      numberOfLiuor++;
      if (!liquorBox) {
        $('#product-card2').prepend(`<div  class="product-card bgs  standarddel  extrabag boxId-44337026302259" data-boxquant="" style="display:none;">
                    <div class="product-img">
                        <img src="https://cdn.shopify.com/s/files/1/0689/3014/2515/products/Azure-blue-bag_bb3706ad-9c9a-4a92-9c98-612cda09068e.jpg?v=1675196131" alt="">
                    </div >
                      <h4 class="product-card-title">Azure blue bag<br> <!--<span class="box_limit">(Ideal for 69 Items)</span>--></h4>
                    
                    <h5 class="price"><span>&#x20b9; 100.00</span></h5>
                  
                    <div class="addToBag">
                      <button type='button' onclick="addtocart('44337026302259','8100413899059',0,1,0)" class="add_44337026302259 prodAddToBagBut"> ADD</button>
                      <button type='button'   class="remove_44337026302259 prodRemoveFromBagBut" style="display:none;"> REMOVE</button>
                        <div class="loader loader_8100413899059 "  style="display:none;"> <span></span> </div>
                    </div>
                  </div>
    
                  
                  <div class="product-card bgs  standarddel extrabag boxId-44337026629939" data-boxquant="00" style="display:none;">
                    <div class="product-img">
                        <img src="https://cdn.shopify.com/s/files/1/0689/3014/2515/products/Wooden-box_b36c5f0b-80a6-4024-a6a1-ecc934659fb6.jpg?v=1675196135" alt="">
                    </div >
                      <h4 class="product-card-title">Wooden Box<br> <!--<span class="box_limit">(Ideal for 69 Items)</span>--></h4>
                    
                    <h5 class="price"><span>&#x20b9;1500.00</span></h5>
                  
                    <div class="addToBag">
                      <button type='button' onclick="addtocart('44337026629939','8100414128435',0,1,0)" class="add_44337026629939 prodAddToBagBut"> ADD</button>
                      <button type='button'   class="remove_44337026629939 prodRemoveFromBagBut" style="display:none;"> REMOVE</button>
                        <div class="loader loader_8100414128435 "  style="display:none;"> <span></span> </div>
                    </div>
                  </div>            
                  <div  class="product-card bgs  standarddel extrabag boxId-44337026498867" data-boxquant="00" style="display:none;">
                    <div class="product-img">
                        <img src="https://cdn.shopify.com/s/files/1/0689/3014/2515/products/Champagne-Cream-bag_668b39ab-a4be-4c57-b897-e4d5f11e22f0.jpg?v=1675196133" alt="">
                    </div >
                      <h4 class="product-card-title">Azure blue bag<br> <!--<span class="box_limit">(Ideal for 69 Items)</span>--></h4>
                    
                    <h5 class="price"><span>&#x20b9; 100.00</span></h5>
                  
                    <div class="addToBag">
                      <button type='button' onclick="addtocart('44337026498867','8100414030131',0,1,0)" class="add_44337026498867 prodAddToBagBut"> ADD</button>
                      <button type='button' class="remove_44337026498867 prodRemoveFromBagBut" style="display:none;"> REMOVE</button>
                        <div class="loader loader_8100414030131 "  style="display:none;"> <span></span> </div>
                    </div>
                  </div>`);
      }
      $(".boxId-44337026629939").show();
      $(".boxId-44337026498867").show();
      $(".boxId-44337026302259").show();
      liquorBox = true
    }
    var disAllowMsg = "You have reached the maximum number of allowed products."
    var allowAdding = 1;
    if (isAGift) {
      if (window.totalUserGiftItemsCount >= window.currentBundleData.product_max_limit) allowAdding = 0, disAllowMsg = "You have reached the maximum number of allowed products.";
    } else if (isABox) {
      if (isliquor) {
        if (window.totalUserBoxItemsCount == 2) {
          allowAdding = 0, disAllowMsg = "You can add only two box in a bundle.";
        }
      } else {
        if (window.totalUserBoxItemsCount == 1) {
          allowAdding = 0, disAllowMsg = "You can add only one box in a bundle.";
        }
      }
    }
    if (allowAdding) {
      addedProductId = [...addedProductId, {
        varient_id,
        loder_id,
        isAGift,
        isABox,
        isAAddon,
        isACard
      }]

      var product_type = 'gift';
      if(isAGift) {
        product_type = 'gift';
      } else if(isABox) {
         product_type = 'box';
      } else if(isAAddon) {
         product_type = 'addon';
      } else if(isACard) {
        product_type = 'card';
      }
      
      $(`.add_${varient_id}`).hide();
      $(`.loader_${loder_id}`).show();
      // Velocity: Added the base quantity and product_type in the cart item property
      var tempATCData = {
        quantity: quantity,
        id: varient_id,
        properties: {
          'bundle_id': window.currentBundleData.bundle_id,
          'base_quantity': quantity,
          'bundle_name': window.currentBundleData.bundle_name,
          'product_type': product_type,
          'tags': $("#"+varient_id+"_tag").html()
        }
      };
      $(".prodAddToBagBut").prop("disabled",true);
      if(isAGift){
        window.totalGiftItemsCount +=1;
      }
       // --- Get image, title, price from DOM --- Added By Velocity 29-07-2025
      // debugger;
      var img = '';
      var title = '';
      var price = 0;
      // Try to get image
      var imgElem = $(`.add_${varient_id}`).closest('.product-card').find('.product-img img');
      if (imgElem.length) {
        img = imgElem.attr('src') || '';
      }
      // Try to get title
      var titleElem = $(`.add_${varient_id}`).closest('.product-card').find('.product-card-title');
      if (titleElem.length) {
        title = titleElem.text().trim();
      }
      // Try to get price
      var priceElem = $(`.add_${varient_id}`).closest('.product-card').find('.price .price-item--sale');
      if (priceElem.length) {
        var priceText = priceElem.text().replace(/[^\d.]/g, '');
        price = parseFloat(priceText)*100 || 0;
      }
      // Fallback: try hidden price
      if (!price) {
        var priceHiddenElem = $(`.add_${varient_id}`).closest('.product-card').find('h5.price span');
        if (priceHiddenElem.length) {
          var priceText2 = priceHiddenElem.text().replace(/[^\d.]/g, '');
          price = parseFloat(priceText2)*100 || 0;
        }
      }
      // ---
      addToCartData[''+varient_id] = tempATCData;
      const productdata = {
        img: img,
        title: title,
        price: price,
        item_var_id: varient_id,
        isAGift: isAGift,
        isABox: isABox,
        isAAddon: isAAddon,
        isACard: isACard,
        itemProdId: loder_id,
        tags: $("#"+varient_id+"_tag").html()
      }
      var alreadyAddedItems = localStorage.getItem("bundle_products");
      localStorage.setItem("bundle_products", (alreadyAddedItems || "") + " " + loder_id);
      var alreadyAddedVariantId = localStorage.getItem("bundle_products_variant_id");
      localStorage.setItem("bundle_products_variant_id", (alreadyAddedVariantId || "") + " " + varient_id);
      selectedItem.push(productdata);
              window.totalUserItemsCount += 1;
              new Promise((resolve, reject) => {
                if (isAGift) {
                  $(`.${varient_id} .qty`).val('1');
                }
                resolve()
              }).then(() => {
                renderProduct(varient_id, loder_id);
              });
              if (isAGift) {
                window.totalUserGiftItemsCount += 1;
                $("#customChooseGiftTitle").html(`Step 1 - Choose Gifts (${window.totalUserGiftItemsCount}) <br><small class='cp_product'"> *Choose atleast ${window.currentBundleData.product_min_limit} product for your hamper.</small>`);
                $("#topChooseGiftsTitle").html(`<span>Choose Gifts <br> (${window.totalUserGiftItemsCount})</span>`);
              } else if (isABox) {
                window.boxVarId = varient_id;
                window.boxProdId = loder_id;
                window.totalUserBoxItemsCount += 1;
              } else {
                if (isACard) {
                  window.totalCardItemsCount += 1;
                  window.totalUserAddonItemsCount += 1;
                } else {
                  window.totalUserAddonItemsCount += 1;
                }
              }
              $(".prodAddToBagBut").prop("disabled",false);
  
      if (isliquor) {
        if (varient_id == "44337026629939") {
          removeFromCart(liquor_box_id, liquor_bag_product_id, 0, 1, 0)
          liquirbagchange = true
          liquor_box_id = "44337026629939"
          liquor_bag_product_id = "8100414128435"
          jQuery.post(window.Shopify.routes.root + 'cart/update.json', "updates[44337026629939]=" + numberOfLiuor);
          renderProduct(44337026629939, 8100414128435)
        } else if (varient_id == "44337026498867") {
          removeFromCart(liquor_box_id, liquor_bag_product_id, 0, 1, 0)
          liquirbagchange = true
          liquor_box_id = "44337026498867"
          liquor_bag_product_id = "8100414030131"
          jQuery.post(window.Shopify.routes.root + 'cart/update.json', "updates[44337026498867]=" + numberOfLiuor);
          renderProduct(44337026498867, 8100414030131)
        } else if (varient_id == "44337026302259") {
          removeFromCart(liquor_box_id, liquor_bag_product_id, 0, 1, 0)
          liquor_box_id = "44337026302259"
          liquor_bag_product_id = "8100413899059"
          liquirbagchange = true
          jQuery.post(window.Shopify.routes.root + 'cart/update.json', "updates[44337026302259]=" + numberOfLiuor);
          renderProduct(44337026302259, 8100413899059)
        }
      }
    } else{ 
    // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
       document.getElementById('warning-msg').textContent =disAllowMsg;
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
      
      }
  }

  function between(x, min, max) {
    return x >= min && x <= max;
  }
  
  function setChooseBoxesData() {
    var currentDeliveryTypeFilter = $(".deliveryActive").data("filter-val");
    if (globalUserLocation == "location-roi") {
      $('[data-filter-val="standarddel"]').click();
      $('[data-filter-val="expressdel"]').hide();
      $(".standarddel").show().removeClass("d-none");
    }
    else {
      if ($("#productcard1 .expressdel.d-none").length > 110) {
        $(".expressdel").show().removeClass("d-none");
        orderscroller();
       
      }
    }
  }
  
  function checkout() {
    /*
    * Added By Velocity
    * Added final inventory check before checkout
    * 04-08-2025
    */
    
    // Final inventory validation before checkout
    const currentLocation = localStorage.getItem('location');
    let inventoryIssues = [];
    
    // Check inventory for all items in cart
    Object.keys(addToCartData).forEach(function (productId) {
      const item = addToCartData[productId];
      const productCard = $(`.add_${productId}`).closest('.product-card');
      
      if (productCard.length > 0) {
        const dataMumbai = productCard.attr('data_mumbai') || '0';
        const dataKolkata = productCard.attr('data_kolkata') || '0';
        const dataGurgaon = productCard.attr('data_gurgaon') || '0';
        const dataDelhi = productCard.attr('data_delhi') || '0';
        const dataBangalore = productCard.attr('data_bangalore') || '0';
        
        let currentInventory = 0;
        
        // Get inventory for current location
        if (currentLocation === 'location-mumbai') {
          currentInventory = parseInt(dataMumbai) || 0;
        } else if (currentLocation === 'location-kolkata') {
          currentInventory = parseInt(dataKolkata) || 0;
        } else if (currentLocation === 'location-gurgaon') {
          currentInventory = parseInt(dataGurgaon) || 0;
        } else if (currentLocation === 'location-bangalore') {
          currentInventory = parseInt(dataBangalore) || 0;
        } 
        
        // Check if requested quantity exceeds available inventory
        if (item.quantity > currentInventory) {
          const productTitle = productCard.find('.product-card-title').text().trim();
          inventoryIssues.push(`${productTitle}: Only ${currentInventory} units available`);
        }
      }
    });
    
    // If there are inventory issues, show warning and stop checkout
    if (inventoryIssues.length > 0) {
      document.getElementById('warning-msg').textContent = "Inventory issues detected: " + inventoryIssues.join(', ');
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
      return false;
    }
    
    let total_product_tat = $("#total-product-tat").val();
    // Step 1: Update `base_quantity` and ensure properties are correctly structured
    Object.keys(addToCartData).forEach(function (productId) {
        var item = addToCartData[productId];
        item.properties.base_quantity = item.quantity;
        item.properties.product_type = item.properties['product_type'];
        item.properties.tags = item.properties['tags'];
        item.properties.total_product_tat = total_product_tat;
    });
    let deliveryDate;
    if ($("#delivery-date-byoh-mobile").is(":visible")) {
        deliveryDate = $("#delivery-date-byoh-mobile").val();
    } else if ($("#delivery-date-byoh-web").is(":visible")) {
        deliveryDate = $("#delivery-date-byoh-web").val();
    }
    Object.keys(addToCartData).forEach(key => {
        addToCartData[key].properties["Delivery date"] = deliveryDate;
    });
    // Save card message and discount code to localStorage
    if ($('[name="card_message_desktop"]').val() != "")
        localStorage.setItem("BYOHCardMsg", $('[name="card_message_desktop"]').val());
    if ($('[name="card_message_mobile"]').val() != "")
        localStorage.setItem("BYOHCardMsg", $('[name="card_message_mobile"]').val());
    localStorage.setItem("BYOHDiscountCode", window.userAppliedDiscount);
    var checkoutButtonEl = $(".final_checkout").find("button");
    if (checkoutButtonEl.is(":disabled")) return false;
    // Validate gift and box requirements
    if (window.totalUserGiftItemsCount < window.currentBundleData.product_min_limit) {
        document.getElementById('warning-msg').textContent = "Please go to Choose Gift Section to Fulfill the minimum requirement.";
        document.getElementById("warning-popup").style.display = "block";
        document.getElementById("warning-overlay").style.display = "block";
        return false;
    }
    if (window.totalUserBoxItemsCount <= 0) {
        document.getElementById('warning-msg').textContent = "Please go to Choose Boxes section to add a Box.";
        document.getElementById("warning-popup").style.display = "block";
        document.getElementById("warning-overlay").style.display = "block";
        return false;
    }
     // Step 4: Fetch current cart and process items
    fetch('/cart.js')
        .then(response => response.json())
        .then(cartData => {
            const itemsToRemove = [];
            const itemsToAdd = Object.values(addToCartData);

            // Identify items in the cart that need to be removed
            cartData.items.forEach(cartItem => {
                const inAddToCartData = addToCartData[cartItem.variant_id];
                const hasBaseQuantity = cartItem.properties && cartItem.properties.base_quantity;

                if (!inAddToCartData && hasBaseQuantity) {
                    // Item is not in addToCartData but has base_quantity, mark for removal
                    itemsToRemove.push({
                        id: cartItem.variant_id,
                        quantity: 0 // Remove the item by setting quantity to 0
                    });
                } else if (inAddToCartData) {
                    // If the item is in addToCartData, still mark it for removal to be re-added
                    itemsToRemove.push({
                        id: cartItem.variant_id,
                        quantity: 0
                    });
                }
            });

            // Remove items from the cart if needed
            if (itemsToRemove.length > 0) {
                const updateData = {
                    updates: Object.fromEntries(itemsToRemove.map(item => [item.id, item.quantity]))
                };

                return fetch('/cart/update.js', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updateData)
                });
            }
        })
        .then(() => {
            // Add items to the cart
            return fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ items: Object.values(addToCartData) })
            });
        })
        .then(() => {
            // Redirect to the cart after updating
  // Cart drawer content reload happens here
        $("#CartDrawer_MainContent>div").load(location.href + " #CartDrawer_MainContent>div", function() {
            // After content is loaded, cart drawer is opened
            $("cart-drawer.drawer").addClass("active");
        });
        })
        .catch(error => {
            console.error('Error processing cart:', error);
            alert("Some Error occurred");
        });

    // Disable the checkout button to prevent multiple submissions
    checkoutButtonEl.prop("disabled", true).css({
        "opacity": "0.5",
        "cursor": "not-allowed"
    });

    return true;
}

  document.querySelectorAll(".filters .item").forEach(function(tab, index) {
    tab.addEventListener("click", function() {
  
      const filters = document.querySelectorAll(".filters .item");
      const tabs = document.querySelectorAll(".tabs__list .tab");
      filters.forEach(function(tab) {
        tab.classList.remove("active");
      });
      this.classList.add("active");
      tabs.forEach(function(tabContent) {
        tabContent.classList.remove("active");
      });
      tabs[index].classList.add("active");
      setTimeout(function() {
        console.log("scroll functiontest")
        orderscroller()
      }, 500)
  
    });
  });
  $(".total-price").text("₹" + totalprice);
  $('.top-tabs-container:eq(1) a span').click(function() {
    $('.top-tabs-container:eq(1)').find('.font_bold').removeClass('font_bold');
    $(this).addClass('font_bold');
  })
  // new multiStepForm
  $(".reset").click(function() {
    $(".qty_selector .qty").val('0');
    Swal.fire({
      title: 'All the selected products will be removed, Do you want to Reset?',
      showDenyButton: true,
      confirmButtonText: 'Yes',
      denyButtonText: 'No',
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('/cart/clear.js', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        selectedItem = [];
        renderProduct();
        $(".prodAddToBagBut").show();
        $(".prodRemoveFromBagBut").hide();
        $(".progressbar-dots").removeClass("active");
        $('.checkout-bar .progressbar-steps:nth-child(1) .progressbar-dots').addClass('active');
        $("#customChooseGiftTitle").html(`Step 1 - Choose Gifts (0)<br><small class='cp_product'"> *Choose atleast ${window.currentBundleData.product_min_limit} product for your hamper..</small>`);
        $("#topChooseGiftsTitle").html(`<span>Choose Gifts <br> (0)</span>`);
        window.totalUserGiftItemsCount = 0, window.totalUserBoxItemsCount = 0, window.totalUserAddonItemsCount = 0, window.boxVarId = "";
        Swal.fire('Reset!', '', 'success')
        $(".prev-btn1").click()
      } else if (result.isDenied) {
        // Swal.fire('Reset are not saved', '', 'info')
      }
    })
  });
  let ischangecolor = true;
  $(document).on("click", ".next-btn1", function(e) {
  const prev_btn = $('.prev_btn');  // just select
              prev_btn.css('display', 'block');
    // prev_btn.css('display', 'block');

    $('.order-details').show()
    orderscroller()
    if (window.totalUserGiftItemsCount < Number(window.currentBundleData.product_min_limit)) {
      ischangecolor = false;
      // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
      const minLimit = Number(window.currentBundleData.product_min_limit);
      const totalGifts = window.totalUserGiftItemsCount;
      const message = `You'll need to add more than ${minLimit} product in "Choose Gifts Section". There are ${totalGifts} products in your bundle.`;
      document.getElementById('warning-msg').textContent = message;
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
      
    } else {
      if(displayChooseBoxProducts == false){
        displayBoxProducts();
        displayChooseBoxProducts = true;
      }
      $("#product-card2 > .product-card").each(function() { 
	
        	$(this).removeClass("data-boxquant-hide");
        	
        	
        	var boxqty = $(this).attr("data-boxquant");
        	console.log(boxqty); 
        	if(boxqty < window.totalGiftItemsCount) {
        		$(this).addClass("data-boxquant-hide");
        
        	}
        }); 
      
      $('.checkout-bar .progressbar-steps .progressbar-dots').removeClass('active');
      $(".tab-pane").hide();
      if (isliquor) {
        addtocart('44337026302259', '8100413899059', 0, 1, 0)
        $(".add_44337026302259").hide()
      }
      $("#step2").fadeIn(1000);
      $(".order_next").removeClass("next-btn1");
      $(".order_next").addClass("next-btn2");
      $("li.progressbar-steps:lt(2) .progressbar-dots").addClass("active");
      $('.checkout-bar .progressbar-steps:nth-child(2) .progressbar-dots').addClass('active');
      setChooseBoxesData();
      ischangecolor = true;
    }
  });
  // Added by velocity - 29-07-2025 Combine Step 2 and Step 3. We need to made the changes in the button and warning
  $(document).on("click", ".next-btn2", function(e) {
            const prev_btn = $('.prev_btn');  // just select
              prev_btn.css('display', 'block');
    // prev_btn.css('display', 'block');

    $('.order-details').show()
    orderscroller()
    if (window.totalUserGiftItemsCount < Number(window.currentBundleData.product_min_limit)) {
      ischangecolor = false;
      // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
      const minLimit = Number(window.currentBundleData.product_min_limit);
      const totalGifts = window.totalUserGiftItemsCount;
      const message = `You'll need to add more than ${minLimit} product in "Choose Gifts Section". There are ${totalGifts} products in your bundle.`;
      document.getElementById('warning-msg').textContent = message;
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
      
    } else {
      if(displayChooseBoxProducts == false){
        displayBoxProducts();
        displayChooseBoxProducts = true;
      }
      $("#product-card2 > .product-card").each(function() { 
	
        	$(this).removeClass("data-boxquant-hide");
        	
        	
        	var boxqty = $(this).attr("data-boxquant");
        	console.log(boxqty); 
        	if(boxqty < window.totalGiftItemsCount) {
        		$(this).addClass("data-boxquant-hide");
        
        	}
        }); 
      
      $('.checkout-bar .progressbar-steps .progressbar-dots').removeClass('active');
      $(".tab-pane").hide();
      if (isliquor) {
        addtocart('44337026302259', '8100413899059', 0, 1, 0)
        $(".add_44337026302259").hide()
      }
      $("#step2").fadeIn(1000);
      $(".order_next").removeClass("next-btn1");
      $(".order_next").addClass("next-btn2");
      $("li.progressbar-steps:lt(2) .progressbar-dots").addClass("active");
      $('.checkout-bar .progressbar-steps:nth-child(2) .progressbar-dots').addClass('active');
      setChooseBoxesData();
      ischangecolor = true;
      {% comment %}
    }
    $('.order-details').show()
    orderscroller()
    if (window.totalUserBoxItemsCount != 0) {
    // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
       document.getElementById('warning-msg').textContent = "Please select a Box";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
     
      ischangecolor = false;
    } else {
      {% endcomment %}
      
      if(displayAddonProductsStatus == false){
        displayAddonsProducts();
        displayAddonProductsStatus = true;
      }
      if (isliquor) {
        if (window.totalUserBoxItemsCount == 1) {
	// Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
           document.getElementById('warning-msg').textContent = "Please Select Gift Box";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
          
        } else if (!liquorBox) {
	// Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
           document.getElementById('warning-msg').textContent = "Please Select Liquor Box";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
          
          ischangecolor = false;
        } else {
          $('.checkout-bar .progressbar-steps .progressbar-dots').removeClass('active');
          $(".tab-pane").hide();
          $("#step3").fadeIn(1000);
          $(".order_next").removeClass("next-btn2");
          $(".order_next").addClass("next-btn3");
          $("li.progressbar-steps:lt(3) .progressbar-dots").addClass("active");
          $('.checkout-bar .progressbar-steps:nth-child(3) .progressbar-dots').addClass('active');
          ischangecolor = true;
          if (!liquirbagchange) {
            jQuery.post(window.Shopify.routes.root + 'cart/update.json', "updates[44337026302259]=" + numberOfLiuor);
            renderProduct(8100413899059, 8100413899059)
          }
        }
      } else {
        $('.checkout-bar .progressbar-steps .progressbar-dots').removeClass('active');
        $(".tab-pane").hide();
        $("#step3").fadeIn(1000);
        $(".order_next").removeClass("next-btn2");
        $(".order_next").addClass("next-btn3");
        $("li.progressbar-steps:lt(2) .progressbar-dots").addClass("active");
        $('.checkout-bar .progressbar-steps:nth-child(2) .progressbar-dots').addClass('active');
        ischangecolor = true;
      }
    }
  });
  $(document).on("click", ".next-btn3", function(e) {
    setDeliveryDate(selectedItem,selected_date);
    
    $(".loaderr").css('display','none');
    orderscroller()
    if (window.totalUserBoxItemsCount == 0) {
    // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
       document.getElementById('warning-msg').textContent = "Please select a Box";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
     
      ischangecolor = false;
    }
    else if(window.totalUserGiftItemsCount < Number(window.currentBundleData.product_min_limit) || window.totalUserBoxItemsCount == 0) {
      // velocity: Added the check to not show the message of please add some product if somebody directly opens the URL 
      var urlParams = new URLSearchParams(window.location.search);
      var isEditHamper = urlParams.get('edit_hamper') === '1';

      if (!isEditHamper) {
      // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
         document.getElementById('warning-msg').textContent = "Please Add Some Products.";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
      
      } 
    } else {
      $('.checkout-bar .progressbar-steps .progressbar-dots').removeClass('active');
      $(".tab-pane").hide();
      if ($(window).width() < 768) {
        orderscrollercheckout()
      }
      if (window.totalCardItemsCount) {
        if ($(window).width() < 480) {
          $('.mobil_msg_feild').show()
        }
        $('.message_feild').show()
      } else {
        if ($(window).width() < 480) {
          $('.mobil_msg_feild').hide()
        }
        $('.message_feild').hide()
      }
      $("#step4").fadeIn(1000);
      $(".order_next").removeClass("next-btn3");
      $(".order_next").addClass("next-btn4");
      $("li.progressbar-steps:lt(4) .progressbar-dots").addClass("active");
      $('.checkout-bar .progressbar-steps:nth-child(4) .progressbar-dots').addClass('active');
      $(".order-details").hide();
      $(".step-4-footer").show();
      $('.totalProductcount_class').text(window.totalUserItemsCount)
    }
  });
  $(".prev-btn1").click(function() {
    orderscroller()
    $(".tab-pane").hide();
    $('.order-details').show()
    $("#step1").fadeIn(1000);
    $('.checkout-bar .progressbar-steps:nth-child(2) .progressbar-dots').removeClass('active');
    $('.checkout-bar .progressbar-steps:nth-child(1) .progressbar-dots').addClass('active');
    $(".order_next").removeClass("next-btn3");
    $(".order_next").addClass("next-btn2");
    // removeFromCart(window.boxVarId, window.boxProdId, 0, 1, 0);
  });
  $(".prev-btn2").click(function() {
    $(".next-btn1").click();
    orderscroller()
    $(".tab-pane").hide();
    $('.order-details').show()
    $("#step2").fadeIn(1000);
    $('.checkout-bar .progressbar-steps:nth-child(3) .progressbar-dots').removeClass('active');
    $('.checkout-bar .progressbar-steps:nth-child(2) .progressbar-dots').addClass('active');
    $(".order_next").removeClass("next-btn3");
    $(".order_next").addClass("next-btn2");
  });
  $(".prev-btn3").click(function() {
    $(".next-btn3").click()
    orderscroller()
    $(".tab-pane").hide();
    $('.order-details').show()
    $("#step3").fadeIn(1000);
    $('.checkout-bar .progressbar-steps:nth-child(3) .progressbar-dots').removeClass('active');
    $('.checkout-bar .progressbar-steps:nth-child(2) .progressbar-dots').addClass('active');
    $(".order_next").removeClass("next-btn4");
    $(".order_next").addClass("next-btn3");
    $(".order-details").show();
    $(".step-4-footer").hide();
  });
  $(".progressbar-dots").click(function() {
    orderscroller()
    if (window.totalUserGiftItemsCount < Number(window.currentBundleData.product_min_limit) || window.totalUserBoxItemsCount == 0) {} else {
      $(".order-details").show();
      $('.checkout-bar .progressbar-steps .progressbar-dots').removeClass('active');
      $(this).addClass('active');
    }
  });
  
  function openTab(evt, tabName_custom) {
    try {
      var i, tabcontent_custom, tablinks_custom;
      tabcontent_custom = document.getElementsByClassName("tabcontent_custom");
      for (i = 0; i < tabcontent_custom.length; i++) {
        tabcontent_custom[i].style.display = "none";
      }
      tablinks_custom = document.getElementsByClassName("tablinks_custom");
      for (i = 0; i < tablinks_custom.length; i++) {
        tablinks_custom[i].className = tablinks_custom[i].className.replace(" active", "");
      }
      document.getElementById(tabName_custom).style.display = "block";
      evt.currentTarget.className += " active";
    } catch (error) {
      console.log("Err")
    }
  }
  // Step 3 Tab end
  const loaderr = document.querySelector('.loaderr');
  const apiResult = document.querySelector('.api-result');
  loaderr.style.display = 'block';
  var bundleValidationData = {
        "product_min_limit": 1,
        "bundle_id": 1015,
        "bundle_name": "Custom Curated Hamper                                   ",
        "bundle_description": "A little bit of everything (gourmet, personal care, stationery & jewellery) for those who love some diversity!                                            ",
        "bundle_image": "https://cdn.shopify.com/s/files/1/0689/3014/2515/files/7788BYOH_OP.jpg?v=1682581473",
        "product_max_limit": 15
    };
  window.currentBundleData = bundleValidationData;
    $("#customChooseGiftTitle").html(`Step 1 - Choose Gifts (0)<br> <small class='cp_product'"> *Choose atleast ${window.currentBundleData.product_min_limit} product for your hamper.</small>`);
    $("#topChooseGiftsTitle").html(`<span>Choose Gifts <br> (0)</span> `);
    var getLocation = localStorage.getItem("location")
    // loaderr.style.display = 'none';
    apiResult.style.display = 'block';

  //velocity : collection data from the metaobject
    // Ensure the variable exists and has data
  var hamperCollections = [];
  let element_first = 0;
     //   const prev_btn = $('.prev_btn');  // just select
  {% for headercollection in shop.metaobjects.hamper_header_collection.values %}
     // Check if it's the first element
    if (element_first === 0) {
        // Call fetchFilterProducts with the first collection's ID
        fetchFilterProducts("{{  headercollection.default_collection.value.handle }}",1);
        element_first = 1; // Update the flag to prevent further calls
	
    }
    
    {% for hcoll in headercollection.header_collection.value %}
      hamperCollections.push({
        id: "{{ hcoll.id }}",
        title: "{{ hcoll.title }}",
        image: "{{ hcoll.image.src | image_url }}",
        handle: "{{ hcoll.handle}}",
      });
    {% endfor %}
  {% endfor %}
  
  console.log("Hamper Collections:", hamperCollections);
  
  orderscroller();

  
  $(".standarddel").hide();
   $(document).on("click", '.filters .item', async function() {
     var perticularCollectionId = $(this).attr('data-collection-handle');
      await fetchFilterProducts(perticularCollectionId); // Pass the clicked element to the function
  });

  function getPriceHtml(product) {
    const productVariant = product.variants.edges[0]?.node;
    const price = productVariant?.price.amount ? parseFloat(productVariant.price.amount) : 0;
    const compareAtPrice = productVariant?.compareAtPrice?.amount
        ? parseFloat(productVariant.compareAtPrice.amount)
        : 0;
    const isAvailable = productVariant?.availableForSale || false;

    // Format price with currency
    const moneyPrice = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: productVariant?.price.currencyCode || 'USD',
    }).format(price);

    const compareMoneyPrice = compareAtPrice
        ? new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: productVariant?.price.currencyCode || 'USD',
          }).format(compareAtPrice)
        : '';

    // Determine price classes and badges
    let priceClass = '';
    // if (!isAvailable) priceClass += ' price--sold-out';
    // if (compareAtPrice > price) priceClass += ' price--on-sale';
    priceClass += ' price--on-sale';
    // Calculate savings
    let savings = '';
    if (compareAtPrice > price) {
        const savingsPercentage = Math.round(((compareAtPrice - price) / compareAtPrice) * 100);
        savings = `${savingsPercentage}% off`;
    }

    // Generate price HTML
    return `
        <div class="price font_text ${priceClass}">
            <div class="price__container">
                <div class="price__sale">
		{% comment %}Add element in case of compareAtPrice is undefined or Null 07-07-2025 added by Velocity{% endcomment %}
                    ${compareAtPrice ? `<span class="price-item price-item--regular">${compareMoneyPrice}</span>` : `<span class="price-item price-item--regular" style='display:inline-block'></span>`}
                    <span class="price-item price-item--sale">${moneyPrice}</span>
                </div>
            </div>
        </div>
    `;
}

  function setDeliveryDate(selectedItems, selected_date ='') {
    console.log("selected_date"+selected_date);
    
    let maxTAT = -Infinity; // Start with the lowest possible value

    selectedItems.forEach(item => {
        const tags = item.tags.split(','); // Convert comma-separated string to an array
        let number = 0; // Default number for this item

        if (tags.includes('same-day') && tags.includes('location-roi')) {
            number = 5;
        } else {
            if (tags.includes('same-day') || tags.includes('3PM')) number = 0;
            if (tags.includes('1-day')) number = 1;
            if (tags.includes('2-days')) number = 2;
            if (tags.includes('3-days')) number = 3;
            if (tags.includes('4-days')) number = 4;
            if (tags.includes('5-days')) number = 5;
            if (tags.includes('6-days')) number = 6;
            if (tags.includes('7-days')) number = 7;
            if (tags.includes('8-days')) number = 8;
            if (tags.includes('10-days')) number = 10;
            if (tags.includes('12-days')) number = 12;
            if (tags.includes('13-days')) number = 13;
            if (tags.includes('4PM-Order')) number = -4;
            if (tags.includes('3PM-Order')) number = -3;
            if (tags.includes('2PM-Order')) number = -2;
            if (tags.includes('7PM-Order')) number = -7;
        }

        // Update the max TAT
        maxTAT = Math.max(maxTAT, number);
    });

    var cityTat = localStorage.getItem("city-tat");

    var today = new Date(istTime);
    var minDate = new Date(today);
    var productTat = parseInt($(".product_tat").val());
    var currentDateTime = new Date(istTime);
          // console.log(currentDateTime + ":currentDateTime after");
          // Set cutoff time at 12:00 PM
          var cutoffTime = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), 12, 0, 0);
          var cutoffTwoPm = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), 14, 0, 0);
          var cutoffTimethreePm = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), 15, 0, 0);
          var cutoffTimeFourPm = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), 16, 0, 0);
          var cutoffTimeSevenPm = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), 19, 0, 0);
          // Added by Velocity 01-08-2025 Flexible Cutoff based on warehouse and overide the Product tag based cutoff.
          var selectedWarehouse = localStorage.getItem("location")?.split("-")[1];

            for (var i = 0; i < warehouse_cutoff.length; i++) {
             var warehouseEntry = warehouse_cutoff[i];
             var warehouseNames = warehouseEntry.name.map(function (c) {
                 return c.toLowerCase();
             });
         
             if (warehouseNames.includes(selectedWarehouse)) {
                 // Override cutoff time with the one from the list
                 cutoffTimeSevenPm = new Date(
                     currentDateTime.getFullYear(),
                     currentDateTime.getMonth(),
                     currentDateTime.getDate(),
                     warehouseEntry.cutoff,
                     0,
                     0
                 );
                 cutoffTwoPm=cutoffTimeSevenPm;
                 cutoffTimethreePm=cutoffTimeSevenPm;
                 cutoffTimeFourPm=cutoffTimeSevenPm;
                 break;
             }
            }
            //END 01-08-2025
      if(maxTAT < 0) {
      
        if (maxTAT == '-3') {
          if(currentDateTime < cutoffTimethreePm) {
            maxTAT = 0;
          } else {
             maxTAT = 1;
          }
        } else if(maxTAT == '-2') {
           if(currentDateTime < cutoffTwoPm) {
            maxTAT = 0;
          } else {
             maxTAT = 1;
          }
        }else if(maxTAT == '-4') {
           if(currentDateTime < cutoffTimeFourPm) {
            maxTAT = 0;
          } else {
             maxTAT = 1;
          }
        }else if(maxTAT == '-7') {
          if(parseInt(cityTat) > 0){
            if(currentDateTime < cutoffTimeFourPm) {
                maxTAT = 0;
            } else {
              maxTAT = 1;
            }
          }
        else {
           if(currentDateTime < cutoffTimeSevenPm) {
            maxTAT = 0;
          } else {
             maxTAT = 1;
          }
        } 
        }else {
          maxTAT = 0;
        }
      } else if(maxTAT == 0) {
           if(currentDateTime < cutoffTimeSevenPm) {
            maxTAT = 0;
          } else {
             maxTAT = 1;
          }
        }else{
          if(currentDateTime < cutoffTimeFourPm) {
            maxTAT += 0;
          } else {
           maxTAT += 1;
          }
        }
    
    if(parseInt(maxTAT) > 0) {
      maxTAT = parseInt(maxTAT) + parseInt(cityTat);
    } else {
      maxTAT = parseInt(cityTat); 
    }

    const mobileDatePicker = $("#delivery-date-byoh-mobile");
    const webDatePicker = $("#delivery-date-byoh-web");
    const totalProductTat = $("#total-product-tat");
    // const webDatePicker = $("#delivery-date-byoh-web");
    // var today = new Date();

    // var minDate = new Date(today);
    var today = new Date(istTime);
    var minDate = new Date(today);
    
    
    minDate.setDate(minDate.getDate() + maxTAT);

    // Convert selected_date to Date object
    let selectedDateObj = null;
    if (selected_date) {
        let parts = selected_date.split('-'); // Convert 'DD-MM-YYYY' to 'YYYY-MM-DD'
        selectedDateObj = new Date(parts[2], parts[1] - 1, parts[0]); // (year, month-1, day)
    }
    
    // Determine the final date to set
    let finalDate = (selectedDateObj && selectedDateObj >= minDate) ? selectedDateObj : minDate;

    
    mobileDatePicker.addClass("ui-state-highlight");
    mobileDatePicker.prop("disabled", false);
    mobileDatePicker.datepicker("option", "minDate", minDate);
    mobileDatePicker.datepicker("setDate", finalDate);

    webDatePicker.addClass("ui-state-highlight");
    webDatePicker.prop("disabled", false);
    webDatePicker.datepicker("option", "minDate", minDate);
    webDatePicker.datepicker("setDate", finalDate);
    totalProductTat.val(maxTAT);
    var sundayCount = 0;
    
    if(maxTAT>0 && !enableSundayDelivery){
      
     const today = new Date(istTime);
     const tempDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); // Stripped time
    const targetDate = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()); // Stripped time

    

    while (tempDate <= targetDate) {
        if (tempDate.getDay() === 0) { // 0 = Sunday
            sundayCount++;
        }
        tempDate.setDate(tempDate.getDate() + 1);
    }

    // Add number of Sundays to minDate
    finalDate.setDate(finalDate.getDate() + sundayCount);

    // Configure datepicker with updated minDate and disable Sundays
    mobileDatePicker.datepicker("option", {
        // minDate: minDate,
        beforeShowDay: function (date) {
            return [date.getDay() !== 0, ""]; // Disable Sundays
        }
    });
     webDatePicker.datepicker("option", {
        // minDate: minDate,
        beforeShowDay: function (date) {
            return [date.getDay() !== 0, ""]; // Disable Sundays
        }
    });
     mobileDatePicker.addClass("ui-state-highlight");
    mobileDatePicker.prop("disabled", false);
    mobileDatePicker.datepicker("option", "minDate", minDate);
    mobileDatePicker.datepicker("setDate", finalDate);

    webDatePicker.addClass("ui-state-highlight");
    webDatePicker.prop("disabled", false);
    webDatePicker.datepicker("option", "minDate", minDate);
    webDatePicker.datepicker("setDate", finalDate);
    }
    return maxTAT+sundayCount;
}
    
  async function fetchFilterProducts(perticularCollectionId,isfirst=0) {
// debugger;



    // Fetch products for the selected collection ID
    const returnedData = await fetchProductsByCollectionId(perticularCollectionId);
    const products = returnedData.data.collectionByHandle.products.edges;
    

        try {
       // Fetch cart data
      const cartData = await fetch('/cart.js').then(response => response.json());
      const cartQuantities = {};

      // CP-28-11 - comment start
      // Map cart quantities by variant ID
      cartData.items.forEach(item => {
          cartQuantities[item.variant_id] = item.quantity;
      
          // Check product type and update counters
          var product_type1 = item.properties.product_type || ''; // Default to empty string if undefined or null
          if (product_type1 === 'gift') {
              window.totalUserGiftItemsCount = (window.totalUserGiftItemsCount || 0) + 1;
            if(isfirst) {
              window.totalGiftItemsCount += item.quantity || 0;
               

            }
          } else if (product_type1 === 'box') {
              window.totalUserBoxItemsCount = 1;
          }

         if (window.totalUserGiftItemsCount > 0) {
            $("#customChooseGiftTitle").html(`Step 1 - Choose Gifts (${window.totalUserGiftItemsCount}) <br><small class='cp_product'> *Choose atleast ${window.currentBundleData.product_min_limit} product for your hamper.</small>`);
            $("#topChooseGiftsTitle").html(`<span>Choose Gifts <br> (${window.totalUserGiftItemsCount})</span>`);
          }
          // Only add product data to selectedItem if base_quantity exists
          if (item.properties.base_quantity) {
              // Check if the item already exists in selectedItem based on item_var_id
                  var existingIndex = selectedItem.findIndex(selected => selected.item_var_id === item.variant_id);
              
                  // Prepare the new item
                  const newItem = {
                      img: item.image || '', // Fallback to empty string if no image
                      isAAddon: product_type1 === 'addon' ? 1 : 0,
                      isABox: product_type1 === 'box' ? 1 : 0,
                      isACard: product_type1 === 'card' ? 1 : 0,
                      isAGift: product_type1 === 'gift' ? 1 : 0,
                      itemProdId: item.product_id,
                      item_var_id: item.variant_id,
                      price: item.price,
                      title: item.title,
                      available_quantity: item.properties.base_quantity || 0, // Add available quantity
                      base_quantity: item.properties.base_quantity, // Add base quantity
                      tags:item.properties.tags,
                      delivery_date: item.properties['Delivery date']
                  };
                  selected_date = item.properties['Delivery date'];
                  // Override existing item or push the new item
                  if (existingIndex > -1) {
                      // If item exists, override it
                      selectedItem[existingIndex] = newItem;
                  } else {
                      // If item doesn't exist, add it
                      selectedItem.push(newItem);
                  }
              
               addToCartData[''+item.variant_id] =  {
                                                      quantity: item.properties.base_quantity,
                                                      id: item.variant_id,
                                                      properties: {
                                                        'bundle_id': window.currentBundleData.bundle_id,
                                                        'base_quantity': item.properties.base_quantity,
                                                        'bundle_name': window.currentBundleData.bundle_name,
                                                        'product_type': product_type1,
                                                        'tags':item.properties.tags
                                                      }
                                                    };
              renderProduct(item.variant_id, item.product_id, 0);
          }
      });

     // Call fetchFilterProducts with the first collection's ID
    var urlParams = new URLSearchParams(window.location.search);
    var isEditHamper = urlParams.get('edit_hamper') === '1';

    if (isEditHamper) {
       setDeliveryDate(selectedItem, selected_date);
      
      $(".loaderr").css('display','block')
      document.querySelector('.next-btn3').click();

      $(".byoh_checkout").css('display','none')
      $(".byoh_view_cart").css('display','block')
      $(".cart_reset_alert_message").css('display','none')
      
      urlParams.delete('edit_hamper');
      var newUrl = `${window.location.pathname}?${urlParams.toString()}`;
      window.history.replaceState({}, document.title, newUrl);

      return;
    } 
          $(".loaderr").css('display','none')
    // if(isfirst == 1) {
    //   return;
    // }
    
    // Hide product card and clear the current collection display
    $('#productcard1').css('display', 'none');
    $('#perticular_collection').html("");

    const loader1 = document.querySelector('.loader1');
    const customLoad = document.querySelector('.custom_load');
    loader1.style.display = 'block';

    // Get the selected collection ID from the clicked element
    // const perticularCollectionId = $(collectionElement).attr('data-collection-id');


       

        // Get locally stored data for added items and location
        const alreadyAddedItems = localStorage.getItem("bundle_products");
       const alreadyAddedVariantId=localStorage.getItem("bundle_products_variant_id");
        const getLocation1 = localStorage.getItem("location");

        loader1.style.display = 'none';
        customLoad.style.display = 'grid';

        // Loop through each product and render them
        products.forEach(({ node: product }) => {
            if(product.tags.includes(getLocation1)) {
            const cardProdImg = product.images.edges[0]?.node.src || 'https://placehold.jp/330x330.png'; // Fallback image
     // Take all the images of the product and pass when click on product image 07-07-2025 added by Velocity
     const imagesJSON = product.images.edges.map(edge => edge.node);
              const Images = encodeURIComponent(JSON.stringify(imagesJSON));
            const productVariant = product.variants.edges[0]?.node;
            // const price = productVariant ? new Intl.NumberFormat("en-US", {
            //                 style: "currency",
            //                 currency: productVariant.price.currencyCode
            //             }).format(productVariant.price.amount) : 'N/A';

          const price =  productVariant.price.amount ? productVariant.price.amount : 'N/A';
            const variantId = productVariant ? productVariant.id.match(/\d+$/)[0] : null; // Extract numeric part
            const productId = product.id.match(/\d+$/)[0]; // Extract numeric part

             // Check if the product is in the cart
            const cartQuantity = cartQuantities[variantId] || 0; // Default to 0 if not in the cart
            const isInCart = cartQuantity > 0;
          
            let expressClass = "";
            let standardClass = "";
            let hideClass = "";

            if (product?.tags?.includes(getLocation1)) expressClass = "expressdel";
            if (product?.tags?.includes("location-roi")) standardClass = "standarddel";

            let addBagStyle = "";
            let removeBagStyle = "";

              // const selector = `.qty_selector.${escapeClass(variantId)}`;
              function escapeClassName(className) {
  return className.replace(/([ !"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~])/g, '\\$1')
                  .replace(/^(\d)/, '\\3$1 ');
}



            if(isInCart) {
              window.totalUserGiftItemsCount += 1;
            }

            let nonveg = "";
            if (product?.tags?.includes("non-veg")) {
                nonveg = `<div class='nonveg-img'><img src="https://cdn.shopify.com/s/files/1/0689/3014/2515/files/non-veg-icon.svg?v=1691504652" alt="non-veg"></div>`;
            }

            const inventoryMetafields = {};

            // Assuming `product.metafields` is the array of metafields
            product.metafields.forEach((metafield) => {
                if (metafield && ["bangalore_inventory", "mumbai_inventory", "gurgaon_inventory", "kolkata_inventory"].includes(metafield.key)) {
                    inventoryMetafields[metafield.key] = metafield.value;
                } else if (metafield === null) {
                    console.warn("Metafield is null. Skipping...");
                }
            });
            
            console.log(inventoryMetafields);

            const currentLocation = localStorage.getItem('location');
            let isAvailable = false;
            var needToHide = '';
            var quantityInput = $('#quantity_filter').val(); // Get input value
            var quantity_required = parseInt(quantityInput); // Convert to integer
                  
            if (currentLocation === 'location-kolkata' && parseInt(inventoryMetafields['kolkata_inventory']) > 0) {
                isAvailable = true;
              if(parseInt(inventoryMetafields['kolkata_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-bangalore' && parseInt(inventoryMetafields['bangalore_inventory']) > 0) {
               isAvailable = true;
              if(parseInt(inventoryMetafields['bangalore_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-mumbai' && parseInt(inventoryMetafields['mumbai_inventory']) > 0){
              isAvailable = true;
              if(parseInt(inventoryMetafields['mumbai_inventory'])<quantity_required){
                needToHide = 'hidden';
              }
            } else if (currentLocation === 'location-gurgaon' && parseInt(inventoryMetafields['gurgaon_inventory'])>0) {
              isAvailable = true;
              if(parseInt(inventoryMetafields['gurgaon_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            }
              
              var data_mumbai = inventoryMetafields['mumbai_inventory'] || '';
              var data_kolkata = inventoryMetafields['kolkata_inventory'] || '';
              var data_gurgaon = inventoryMetafields['gurgaon_inventory'] || '';
              var data_delhi = inventoryMetafields['delhi_inventory'] || '';
              var data_bangalore= inventoryMetafields['bangalore_inventory'] || '';
             var isParishable = localStorage.getItem("isPerishable") || 0;
              if(isParishable == 0) {
                if(product?.tags?.includes("perishable-item")) {
                   needToHide = 'hidden';
                }
              }
            // Render product card only if available
            if (isAvailable) {
               const priceHtml = getPriceHtml(product);
               // added by velocity 04-08-2025 Add inventory Attribute for checking the product inventory.
                $('#perticular_collection').append(`
                    <div class="${needToHide} product-card ${expressClass} ${standardClass} ${hideClass}" data_mumbai="${data_mumbai}" data_bangalore="${data_bangalore}" data_kolkata="${data_kolkata}" data_gurgaon="${data_gurgaon}" data_delhi="${data_delhi}">
                    <p id="${ variantId }_tag" class="product_tag">${ product.tags }</p>
                        <div class="product-img">
                   {% comment %} Pass the image of the product when click on the below product image 07-07-2025 added by Velocity{% endcomment %}
                            <img src="${cardProdImg}" onclick="openProductPopup('${Images}')" alt="${product.handle}">
                        </div>
                        ${nonveg}
                        <h4 class="product-card-title">${product.title}</h4>
                        <h5 class="price" style="display:none;">
                        <span>&#x20b9;${price}</span>
                        </h5>
                             ${priceHtml}
                        <div class="qty_selector ${variantId} variant-${variantId}" style="display:none;">
                            <span onclick='quantitySelector("${variantId}", "${productId}", 1, 0, 0, 0, 0)'>-</span>
                            <input type="text" name="qty" value="${addToCartData[variantId] && addToCartData[variantId]['quantity'] ? addToCartData[variantId]['quantity'] : 0}" class="qty" onchange='quantitySelector("${variantId}", "${productId}", 1, 0, 0, 0, 0, true)' />
                            <span onclick='quantitySelector("${variantId}", "${productId}", 1, 0, 0, 0, 1)'>+</span>
                        </div>
                        <div class="addToBag">
                            <button type='button' onclick="addtocart('${variantId}', '${productId}', 1, 0, 0, 0)" class="add_${variantId} prodAddToBagBut" ${addBagStyle}>ADD</button>
                            {% comment %} Remove the Remove button in case product added in the first step of BYOH 07-07-2025 Added by Velocity {% endcomment %}
			    {% comment %}<button type='button' onclick="removeFromCart('${variantId}', '${productId}', 1, 0, 0)" class="remove_${variantId} prodRemoveFromBagBut" ${removeBagStyle}>REMOVE</button>{% endcomment %}
                            <div class="loader loader_${productId}" style="display:none;"> <span></span> </div>
                        </div>
                    </div>
                `);
            }
              const selector = `.qty_selector.variant-${variantId}`;
              const add_selector = `.add_${variantId}`;
	       // Remove the Remove button in case product added in the first step of BYOH 07-07-2025 Added by Velocity
              // const remove_selector = `.remove_${variantId}`;

            if (alreadyAddedVariantId?.includes(variantId) || isInCart) {
                $(selector).css('display', 'block');
              $(add_selector).css('display', 'none');
            } 
            else {
                $(selector).css('display', 'none');
		 // Remove the Remove button in case product added in the first step of BYOH 07-07-2025 Added by Velocity
              // $(remove_selector).css('display', 'none');
            }
          }
        });

        // Scroll and order updates
        // $('html, body').animate({
        //     scrollTop: $(".header").height() + $(".BYOH_HERO").height() - $(".checkout-bar").height()
        // }, 'slow');
        setTimeout(() => orderscroller(), 500);
    } catch (error) {
        console.error("Error fetching products for collection:", error);
    }
}
  
  let isswipe = 0
  let storethis
  async function resetcartfun(value) {
    isswipe = value
    if (value) {
      $(".deliveryActive").removeClass("font_bold");
      $(".deliveryActive").removeClass("deliveryActive");
      storethis.addClass("deliveryActive font_bold");
      var deliveryFilterVal = storethis.data("filter-val"),
        deliveryFilterRivalVal = storethis.data('filter-rival-val');
      $("." + deliveryFilterVal).show().removeClass("d-none");
      $("." + deliveryFilterRivalVal).hide().addClass("d-none");
      $("#product-card3 .expressdel.standarddel").show().removeClass("d-none");
      $("#product-card4 .expressdel.standarddel").show().removeClass("d-none");
      $("#product-card5 .expressdel.standarddel").show().removeClass("d-none");
      if (deliveryFilterVal == "expressdel") {
        // $("li[data-collection-id='441754452275']").hide();
        // $("li[data-collection-id='441754779955']").hide();
        // $("li[data-collection-id='441754911027']").hide();
        // $("li[data-collection-id='441754845491']").hide();
        // $("li[data-collection-id='441754943795']").hide();
        $('.desglamor-text').text('For delivery within 24 hours')
      } else {
        // $("li[data-collection-id='441754452275']").show();
        // $("li[data-collection-id='441754779955']").show();
        // $("li[data-collection-id='441754911027']").show();
        // $("li[data-collection-id='441754845491']").show();
        // $("li[data-collection-id='441754943795']").show();
        $('.desglamor-text').text('With an extensive range of products & Delivery within 7-8 days')
      }
      await setChooseBoxesData();
      await addedProductId.forEach((element) => {
        removeFromCart(element.varient_id, element.loder_id, element.isAGift, element.isABox, element.isAAddon)
      })
      $(".prev-btn1").click()
    }
    $('.model_dl_change').css("display", 'none');
  }
  $('.deliveryFilters').on('click', function() {
    if (!$(this).hasClass("deliveryActive")) {
      storethis = $(this);
      if (addedProductId.length) {
        $('.model_dl_change').css("display", 'flex');
      } else {
        $(".deliveryActive").removeClass("font_bold");
        $(".deliveryActive").removeClass("deliveryActive");
        $(this).addClass("deliveryActive font_bold");
        var deliveryFilterVal = $(this).data("filter-val"),
          deliveryFilterRivalVal = $(this).data('filter-rival-val');
        $("." + deliveryFilterVal).show().removeClass("d-none");
        $("." + deliveryFilterRivalVal).hide().addClass("d-none");
        $("#product-card3 .expressdel.standarddel").show().removeClass("d-none");
        $("#product-card4 .expressdel.standarddel").show().removeClass("d-none");
        $("#product-card5 .expressdel.standarddel").show().removeClass("d-none");
        if (deliveryFilterVal == "expressdel") {
          // $("li[data-collection-id='441754452275']").hide();
          // $("li[data-collection-id='441754779955']").hide();
          // $("li[data-collection-id='441754911027']").hide();
          // $("li[data-collection-id='441754845491']").hide();
          // $("li[data-collection-id='441754943795']").hide();
          $('.desglamor-text').text('For delivery within 24 hours')
        } else {
          // $("li[data-collection-id='441754452275']").show();
          // $("li[data-collection-id='441754779955']").show();
          // $("li[data-collection-id='441754911027']").show();
          // $("li[data-collection-id='441754845491']").show();
          // $("li[data-collection-id='441754943795']").show();
          $('.desglamor-text').text('With an extensive range of products & Delivery within 7-8 days')
        }
        setChooseBoxesData();
      }
    }
  });
  let discount_percen;
  $(document).on('click', '.delete_image img', function() {
    $('.table-footer .right.show_discount_price').hide();
    var price = $(this).closest('tr').find('.price').text();
    var deletedProdId = $(this).data("del-prod-id"),
      deletedVarId = $(this).data("del-var-id"),
      isAGift = $(this).data("is-a-gift"),
      isABox = $(this).data("is-a-box"),
      isAAddon = $(this).data("is-a-addon"),
      isAcard = $(this).data("is-a-card");
    price = price.trim().replace('₹', '');
    var totalPriceNew = parseFloat(price);
    $(this).closest('tr').remove();
    var totalPriceNewOld = $('.right .total-price1').text();
    totalPriceNewOld = totalPriceNewOld.trim().replace('₹', '');
    totalPriceNewOld = parseFloat(totalPriceNewOld);
    var totalPriceNewOne = totalPriceNewOld - totalPriceNew;
    let subprice = $('#SubTotalPrice').text();
    if (subprice.substring(1) == 00) {} else {
      let original_price = Number(price);
      let newsubtotal_price = Number(price) * (Math.abs(parseInt(discount_percen)) / 100);
      let subpriceltt = original_price - newsubtotal_price;
      var tempSubTPrice = Number(subprice.substring(1)) - subpriceltt;
      tempSubTPrice = isNaN(tempSubTPrice) ? "---" : tempSubTPrice;
      $('#SubTotalPrice').text(tempSubTPrice);
      $("#SubTotalPrice").prepend("&#8377;");
    }
    if (window.totalUserGiftItemsCount == 0) {
      $("#topChooseGiftsTitle").html(`<span>Choose Gifts <br> (0)</span>`);
    }
    $('.right .total-price1').text(`₹${totalPriceNewOne}`);
    if (Number(isAGift))
      if ($(`#gdId-${deletedVarId}`).hasClass('liquor')) {
        removeFromCart(deletedVarId, deletedProdId, 1, 0, 0, 0);
        removeFromCart(liquor_box_id, liquor_bag_product_id, 0, 1, 0, 0);
      } else {
        removeFromCart(deletedVarId, deletedProdId, 1, 0, 0, 0);
      }
    else if (Number(isABox)) removeFromCart(deletedVarId, deletedProdId, 0, 1, 0, 0);
    else if (Number(isAcard)) removeFromCart(deletedVarId, deletedProdId, 0, 0, 1, 1);
    else if (Number(isAAddon)) removeFromCart(deletedVarId, deletedProdId, 0, 0, 1, 0);
  });
  $(document).ready(function() {
      $(".apply_coupon").click(function() {
      $(".popup").show();
    });
    $(".close").click(function() {
      $(".popup").hide();
    });

    $("#submit-btn").click(function() {
      var discountVal = $("#name-input").val();
      if(discountVal==""){
        alert("PLease enter a Discount Code");
        return false;
      }
      fetch("https://tgs.velsof.com/fetchapi?action=fetchDiscountData&shop_url=tgs-revamp.myshopify.com&code=" + discountVal + "&_="+new Date().getTime(), {
        method: "GET",
        headers: {
          "x-api-key": "339308f5c7eac7cdaffd9646d61109a7"
        }
      }).then(response => response.text()).then(data => {
        if (data == "'discount_code'") {
          alert("Invalid Discount Code");
          $('.show_discount_price').css({
            "display": "none"
          })
        }
        else{
          data = JSON.parse(data);
          const endsAtDatetime = new Date(data[0].ends_at);
          const currentDatetime = new Date(istTime);
          if (endsAtDatetime <= currentDatetime && data[0].ends_at != null){
            alert("The discount is expired.");
            return false;
          }
          else{
            window.userAppliedDiscount = discountVal;
            var dataValueType = data[0].value_type;
            var dataValue = data[0].value;
            discount_percen = dataValue
            if (dataValueType == 'percentage') {
              var originalPrice = totalprice;
              var discountPercentage = dataValue;
              applyDiscount(originalPrice, discountPercentage, "percentage");
            }
            else{
              var originalPrice = totalprice;
              var discountPercentage = dataValue;
              applyDiscount(originalPrice, discountPercentage, "fixed");
            }
            alert("Discount Valid and Applied Successfully");
          }
        }
      })
      $(".popup").hide();
    });
    
    $(".price").removeClass('font_md')
      var hamperCollections = [];
  let element_first = 0;
    
  {% for headercollection in shop.metaobjects.hamper_header_collection.values %}
    
     // Check if it's the first element
    if (element_first === 0) {
      localStorage.setItem("byoh_bow_collection_id", "{{  headercollection.bow_collection.value.handle }}");
      localStorage.setItem("byoh_box_collection_id", "{{  headercollection.box_collection.value.handle }}");
      localStorage.setItem("byoh_sleeve_collection_id", "{{  headercollection.sleeve_collection.value.handle }}");
      localStorage.setItem("byoh_cards_collection_id", "{{  headercollection.cards.value.handle }}");
      element_first = 1; // Update the flag to prevent further calls
    }
  {% endfor %}
   // // Fetch cart data
    const cartData1 =  fetch('/cart.js').then(response => response.json());
    // Map cart quantities by variant ID
    cartData1.items.forEach(item => {
        var product_type = item.properties['product_type'];
        if(product_type == 'gift') {
          window.totalUserGiftItemsCount += 1;
        } else if(product_type == 'box') {
            window.totalUserBoxItemsCount = 1;
        }
    });
  });
  localStorage.setItem("discountedPrice", '');
  
  function applyDiscount(originalPrice, discountPercentage, discountType) {
    if(discountType=="percentage")
      var discountAmount = originalPrice * (Math.abs(parseInt(discountPercentage)) / 100);
    else
      var discountAmount = Math.abs(parseInt(discountPercentage));
    var discountedPrice = parseInt(originalPrice) - parseInt(discountAmount);
    localStorage.setItem("discountedPrice", discountedPrice);
    $('#SubTotalPrice').text(discountedPrice);
    $("#SubTotalPrice").prepend("&#8377;");
    $("#SubTotalPricemb").text(discountedPrice);
    $("#SubTotalPricemb").prepend("&#8377;");
    $(".total-price").text(discountedPrice);
    $(".total-price").prepend("&#8377;");
    $('.Discount_price').text(parseInt(discountAmount))
    $(".Discount_price").prepend("- &#8377;");
    $('.show_discount_price').css({
      "display": "flex"
    })
    $('.ltttl').css("display", "flex")
    return discountedPrice;
  }
  const storedDiscountedPrice = localStorage.getItem("discountedPrice")
  $(document).ready(function() {
    let get_high = true;
    let navHeight;
    $(window).bind('scroll', function() {
      if (get_high) {
        navHeight = $('.floating_box').offset().top;
      }
      if ($(document).scrollTop() > navHeight) {
        $('.floating_box').addClass('fixedtabs_scroll');
        let totalHeight = $(".announcement-bar").height() + $("sticky-header").height() - 5;
        if ($(document).width() < 768) {
          $(".floating_box").css("top", ` ${totalHeight}px`);
        } else {
          $(".floating_box").css("top", `  ${totalHeight}px`); // Added by Velocity. To fix the floating css for Hamper collection menu. 04-08-2025
        }
      } else {
        $('.floating_box').removeClass('fixedtabs_scroll');
      }
      get_high = false;
    });
  });
  
  function orderscroller() {
    let get_high2 = true;
    let orderHeight;
    $(window).bind('scroll', function() {
      if (get_high2) {
        if ($(window).width() > 768) {
          orderHeight = $('footer').offset().top - ($("footer").height() * 1.5);
        } else {
          orderHeight = $('footer').offset().top - ($("footer").height());
        }
      }
      $('body').on('scroll', '.card-container', function() {});
      if ($(document).scrollTop() < orderHeight) {
        $('.order-details').addClass('ordersfixedtabs_scroll');
        $('.triangle-5').css('cssText', 'display: none !important');
      } else {
        $('.order-details').removeClass('ordersfixedtabs_scroll');
        $('.triangle-5').css('cssText', 'display: inline-block !important');
      }
      get_high2 = false;
    });
  }
  orderscroller();
  
  function orderscrollercheckout() {
    let get_high2 = true;
    let orderHeight;
    $(window).bind('scroll', function() {
      if (get_high2) {
        if ($(window).width() > 768) {
          orderHeight = $('footer').offset().top - ($("footer").height() * 3);
        } else {
          orderHeight = $('footer').offset().top - ($("footer").height() * 2);
        }
      }
      if ($(document).scrollTop() < orderHeight) {
        $('.step-4-footer').addClass('fixer');
      } else {
        $('.step-4-footer').removeClass('fixer');
      }
      get_high2 = false;
    });
  }
    $(document).on('click', '.modal-toggle', function(e) {
    e.preventDefault();
    if (window.totalUserGiftItemsCount <= 0) {
    // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
      document.getElementById('warning-msg').textContent = "Please Add Some Products.";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
      // alert("Please Add some products");
      $('.modal').removeClass('is-visible');
    } else {
      $('.modal').addClass('is-visible');
    }
  });
  $('body').on('click', '.modal-close', function(e) {
    e.preventDefault();
    $('.modal').removeClass('is-visible');
  })
  $('body').on('click', '.remove_btn', function() {
    const myTimeout = setTimeout(modelclos, 1000);
  
    function modelclos() {
      if (window.totalUserGiftItemsCount <= 0) {
        $('.modal').removeClass('is-visible');
        $(".progressbar-dots.prev-btn1 ").trigger("click");
      }
    }
  });
  
  function clickAndDrag(selector, scroll_speed = 3, classOnEvent = 'grabbed_elem') {
    const slider = document.querySelector(selector);
    let isDown = false;
    let startX;
    let scrollLeft;
    slider.addEventListener('mousedown', (e) => {
      e.preventDefault();
      isDown = true;
      slider.classList.add(classOnEvent);
      startX = e.pageX - slider.offsetLeft;
      scrollLeft = slider.scrollLeft;
      document.body.addEventListener('click', function(event) {
        if (slider.contains(event.target)) {
          event.preventDefault();
        }
      });
    });
    slider.addEventListener('mouseleave', () => {
      isDown = false;
      slider.classList.remove(classOnEvent);
    });
    slider.addEventListener('mouseup', () => {
      isDown = false;
      slider.classList.remove(classOnEvent);
    });
    slider.addEventListener('mousemove', (e) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - slider.offsetLeft;
      const walk = (x - startX) * scroll_speed;
      slider.scrollLeft = scrollLeft - walk;
    });
  }
  clickAndDrag('.filters');
  
  function quantitySelector(varient_id, loder_id, isAGift, isABox, isAAddon, isACard, sign, manualInput = false) {
    /* Added by Velocity
    * Added inventory check for manual quantity input changes
    * 04-08-2025
    */
    
    // Handle manual input changes
    if (manualInput) {
      const newQuantity = parseInt($(`.${varient_id} .qty`).val()) || 0;
      
      // Check inventory before allowing quantity change
      const productCard = $(`.${varient_id} .qty`).closest('.product-card');
      if (productCard.length > 0) {
        const currentLocation = localStorage.getItem('location');
        const dataMumbai = productCard.attr('data_mumbai') || '0';
        const dataKolkata = productCard.attr('data_kolkata') || '0';
        const dataGurgaon = productCard.attr('data_gurgaon') || '0';
        const dataDelhi = productCard.attr('data_delhi') || '0';
        const dataBangalore = productCard.attr('data_bangalore') || '0';
        
        let currentInventory = 0;
        
        // Get inventory for current location
        if (currentLocation === 'location-mumbai') {
          currentInventory = parseInt(dataMumbai) || 0;
        } else if (currentLocation === 'location-kolkata') {
          currentInventory = parseInt(dataKolkata) || 0;
        } else if (currentLocation === 'location-gurgaon') {
          currentInventory = parseInt(dataGurgaon) || 0;
        } else if (currentLocation === 'location-bangalore') {
          currentInventory = parseInt(dataBangalore) || 0;
        } else {
          // For ROI or other locations, use Delhi inventory as default
          currentInventory = parseInt(dataDelhi) || 0;
        }
        
        // Check if new quantity would exceed available inventory
        if (newQuantity > currentInventory) {
          document.getElementById('warning-msg').textContent = `Only ${currentInventory} units are available.`;
          document.getElementById("warning-popup").style.display = "block";
          document.getElementById("warning-overlay").style.display = "block";
          // Reset to previous valid quantity
          $(`.${varient_id} .qty`).val(addToCartData[varient_id] ? addToCartData[varient_id].quantity : 0);
          return false;
        }
        
        // Update the quantity in addToCartData
        if (addToCartData[varient_id]) {
          addToCartData[varient_id].quantity = newQuantity;
          renderProduct(varient_id, loder_id, 0);
        }
        return true;
      }
    }
    
    if (sign) {
      if ($(`#gdId-${varient_id}`).hasClass('liquor')) {
        numberOfLiuor++;
      }
      let val = $(`.${varient_id} .qty`).val();
      if (val == 0) {
        addtocart(varient_id, loder_id, 1, 0, 0);
        new Promise((resolve, reject) => {
          let newval = Number(val) + 1;
          resolve(newval)
        }).then((newval) => {
          $(`.${varient_id} .qty`).val(newval)
            // if(isAGift){
            //   window.totalGiftItemsCount +=1;
            // }
        })
      } else {
        /* Added by Velocity
        * Added inventory check when increasing product quantity
        * 04-08-2025
        */
        
        // Check inventory before increasing quantity
        const productCard = $(`.${varient_id} .qty`).closest('.product-card');
        if (productCard.length > 0) {
          const currentLocation = localStorage.getItem('location');
          const dataMumbai = productCard.attr('data_mumbai') || '0';
          const dataKolkata = productCard.attr('data_kolkata') || '0';
          const dataGurgaon = productCard.attr('data_gurgaon') || '0';
          const dataDelhi = productCard.attr('data_delhi') || '0';
          const dataBangalore = productCard.attr('data_bangalore') || '0';
          
          let currentInventory = 0;
          
          // Get inventory for current location
          if (currentLocation === 'location-mumbai') {
            currentInventory = parseInt(dataMumbai) || 0;
          } else if (currentLocation === 'location-kolkata') {
            currentInventory = parseInt(dataKolkata) || 0;
          } else if (currentLocation === 'location-gurgaon') {
            currentInventory = parseInt(dataGurgaon) || 0;
          } else if (currentLocation === 'location-bangalore') {
            currentInventory = parseInt(dataBangalore) || 0;
          } 
          
          const newval = Number(val) + 1;
          
          // Check if new quantity would exceed available inventory
          if (newval > currentInventory) {
            document.getElementById('warning-msg').textContent = `Only ${currentInventory} units are available.`;
            document.getElementById("warning-popup").style.display = "block";
            document.getElementById("warning-overlay").style.display = "block";
            return false;
          }
        }
        
        new Promise((resolve, reject) => {
          let newval = Number(val) + 1;
          resolve(newval)
        }).then((newval) => {
	$(".byoh_checkout").css('display','block')
          if ($(".byoh_view_cart").css('display') === 'block') {
              // If byoh_view_cart is display block, set it to none and cart_reset_alert_message to block
              $(".byoh_view_cart").css('display', 'none');
              $(".cart_reset_alert_message").css('display', 'block');
          } else {
              // Otherwise, set cart_reset_alert_message to none
              $(".cart_reset_alert_message").css('display', 'none');
          }

         
          if(isAGift){
              window.totalGiftItemsCount +=1;
            }
          let qty_val = $(`.${varient_id} .qty`).val();
          addToCartData[''+varient_id].quantity = newval;
          
          // jQuery.post('/cart/change.json', {
          //   quantity: newval,
          //   id: varient_id
          // });
          $(`.${varient_id} .qty`).val(newval)
          renderProduct(varient_id, loder_id, 0)
        })
      }
    } else {
      let val = $(`.${varient_id} .qty`).val();
      if ($(`#gdId-${varient_id}`).hasClass('liquor')) {
        numberOfLiuor--;
      }
      if (Number(val) == 1) {
        $(`.${varient_id} .qty`).val(Number(val) - 1);
        new Promise((resolve, reject) => {
          // if(isAGift){
          //     window.totalGiftItemsCount -=1;
          //   }
          removeFromCart(varient_id, loder_id, 1, 0, 0, 0)
          resolve()
        }).then(() => {
          const sscsc = setTimeout(() => {
            if (window.totalUserGiftItemsCount <= 0) {
              $('.modal').removeClass('is-visible');
              $(".progressbar-dots.prev-btn1 ").trigger("click");
            }
          }, 1000);
        });
      } else if (val == 0) {
      // Replace Alert warning with PopUp warning 07-07-2025 added by Velocity
         document.getElementById('warning-msg').textContent = "You can't select negative quantity";
      document.getElementById("warning-popup").style.display = "block";
      document.getElementById("warning-overlay").style.display = "block";
        alert("You can't select negative quantity")
      } else {
        new Promise((resolve, reject) => {
          let newval = Number(val) - 1;
          $(`.${varient_id} .qty`).val(Number(val) - 1);
          resolve(newval)
        }).then((newval) => {
	 $(".byoh_checkout").css('display','block')
          if ($(".byoh_view_cart").css('display') === 'block') {
                // If byoh_view_cart is display block, set it to none and cart_reset_alert_message to block
                $(".byoh_view_cart").css('display', 'none');
                $(".cart_reset_alert_message").css('display', 'block');
            } else {
                // Otherwise, set cart_reset_alert_message to none
                $(".cart_reset_alert_message").css('display', 'none');
            }

            if(isAGift){
              window.totalGiftItemsCount -=1;
            }
          addToCartData[''+varient_id].quantity = newval;
          // jQuery.post('/cart/change.json', {
          //   quantity: newval,
          //   id: varient_id
          // });
          renderProduct(varient_id, loder_id, 0);
        })
      }
    }
  }
  $(window).on('beforeunload', function() {
    $(window).scrollTop(0);
  });
  document.addEventListener('allGiftProductsLoaded', function(event) {
    if (globalUserLocation == "location-roi") {
      $('[data-filter-val="standarddel"]').click();
      $('[data-filter-val="expressdel"]').hide();
      $(".standarddel").show().removeClass("d-none");
    }else if (globalUserLocation == "location-kolkata") {
      // var expressDelCheck = setInterval(function name(params) {
      //   // if ($("#productcard1 .expressdel.d-none").length > 110) {
      //     $(".kolkata_prd").show().removeClass("d-none");
      //     clearInterval(expressDelCheck);
      //     orderscroller();
      //   // }
      // }, 10);
      setTimeout(function(){
        $(".kolkata_prd").show().removeClass("d-none");
        orderscroller();
      }, 500)
      
    }
    else {
      var expressDelCheck = setInterval(function name(params) {
        if ($("#productcard1 .expressdel.d-none").length > 110) {
          $(".expressdel").show().removeClass("d-none");
          clearInterval(expressDelCheck);
          orderscroller();
        }
      }, 10);
    }
  });
  document.addEventListener('allProductsLoaded', function(event) {
    
    if (globalUserLocation == "location-roi") {
      $('[data-filter-val="standarddel"]').click();
      $('[data-filter-val="expressdel"]').hide();
    }else if (globalUserLocation == "location-kolkata") {
      // var expressDelCheck = setInterval(function name(params) {
      //   // if ($("#productcard1 .expressdel.d-none").length > 110) {
      //     $(".kolkata_prd").show().removeClass("d-none");
      //     clearInterval(expressDelCheck);
      //     orderscroller();
      //   // }
      // }, 10);
      
      setTimeout(function(){
        $(".kolkata_prd").show().removeClass("d-none");
        orderscroller();
      }, 500)
    }
    else {
      var expressDelCheck = setInterval(function name(params) {
        // if ($("#productcard1 .expressdel.d-none").length > 110) {
          $(".expressdel").show().removeClass("d-none");
          clearInterval(expressDelCheck);
          orderscroller();
        // }
      }, 10);
    }
  });

async function displayBoxProducts() {
  // Fetch location and show loader
  let getLocation = localStorage.getItem("location");
  const loaderr = document.querySelector('.loaderr');
  loaderr.style.display = 'block';

  // Fetch box products and cart data
  const chooseBoxData = await fetchProductsByCollectionId(localStorage.getItem("byoh_box_collection_id"));
  const cartData = await fetch('/cart.js').then(response => response.json());

  // Hide loader once data is fetched
  if (chooseBoxData) {
    loaderr.style.display = 'none';
  }

  const chooseBox = chooseBoxData.data.collectionByHandle.products.edges;
  const cartQuantities = {};
  
  // Create a map of variant IDs to quantities in the cart
  cartData.items.forEach(item => {
    cartQuantities[item.variant_id] = item.quantity;
  });

  console.log(chooseBox);

  chooseBox.forEach(product => {
     // if(product.node.tags.includes(getLocation)) {
      const inventoryMetafields = {};
          // Assuming `product.metafields` is the array of metafields
          product.node.metafields.forEach((metafield) => {
              if (metafield && ["bangalore_inventory", "mumbai_inventory", "gurgaon_inventory", "kolkata_inventory"].includes(metafield.key)) {
                  inventoryMetafields[metafield.key] = metafield.value;
              } else if (metafield === null) {
                  console.warn("Metafield is null. Skipping...");
              }
          });
          
          console.log(inventoryMetafields);

          const currentLocation = localStorage.getItem('location');
          let isAvailable = false;

           var needToHide = '';
            var quantityInput = $('#quantity_filter').val(); // Get input value
            var quantity_required = parseInt(quantityInput); // Convert to integer
                  
            if (currentLocation === 'location-kolkata' && parseInt(inventoryMetafields['kolkata_inventory']) > 0) {
                isAvailable = true;
              if(parseInt(inventoryMetafields['kolkata_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-bangalore' && parseInt(inventoryMetafields['bangalore_inventory']) > 0) {
               isAvailable = true;
              if(parseInt(inventoryMetafields['bangalore_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-mumbai' && parseInt(inventoryMetafields['mumbai_inventory']) > 0){
              isAvailable = true;
              if(parseInt(inventoryMetafields['mumbai_inventory'])<quantity_required){
                needToHide = 'hidden';
              }
            } else if (currentLocation === 'location-gurgaon' && parseInt(inventoryMetafields['gurgaon_inventory'])>0) {
              isAvailable = true;
              if(parseInt(inventoryMetafields['gurgaon_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            }
            
            // Set inventory data variables for product card attributes  Added by Velocity 04-08-2025
            var data_mumbai = inventoryMetafields['mumbai_inventory'] || '';
            var data_kolkata = inventoryMetafields['kolkata_inventory'] || '';
            var data_gurgaon = inventoryMetafields['gurgaon_inventory'] || '';
            var data_delhi = inventoryMetafields['delhi_inventory'] || '';
            var data_bangalore = inventoryMetafields['bangalore_inventory'] || '';

    if (isAvailable) {
      const priceHtml = getPriceHtml(product.node);
      // Product information
      const cardProdImg = product.node.images.edges[0]?.node.src || 'https://placehold.jp/330x330.png'; // Default to placeholder if no image
      const boxImagesJSON = product.node.images.edges.map(edge => edge.node);
      const boxImages = encodeURIComponent(JSON.stringify(boxImagesJSON));
      const productVariant = product.node.variants.edges[0]?.node;
      const price = productVariant.price.amount ? productVariant.price.amount : 'N/A';
      const variantId = productVariant ? productVariant.id.match(/\d+$/)[0] : null; // Extract numeric part
      const productId = product.node.id.match(/\d+$/)[0]; // Extract numeric part

      // Max quantity from tags
      const boxProdTags = product?.node?.tags || []; // Default to empty array if tags are undefined
      const tagsString = boxProdTags.join(", ");
      const boxMaxQuantData = tagsString.match(/quant-(\d+)/);
      const boxMaxQuantFinal = boxMaxQuantData ? parseInt(boxMaxQuantData[1]) : 0;
      var showBox = '';
      if(boxMaxQuantFinal < window.totalGiftItemsCount){
        showBox = 'data-boxquant-hide'
      }

      // Determine classes based on location and tags
      let expressClass = tagsString.toLowerCase().includes(getLocation) ? "expressdel" : "";
      let standardClass = tagsString.toLowerCase().includes("location-roi") ? "standarddel" : "";
      let hideClass = "d-none";
      let kolkata_prd = tagsString.includes("location-kolkata") || tagsString.includes("kolkata-poc") ? "kolkata_prd" : "";

       // Fetch cart quantity
        const cartQuantity = cartQuantities[variantId] || 0; // Default to 0 if not in cart
        var isInCart = cartQuantity > 0;
        var existingIndex =  selectedItem.findIndex(selected => selected.item_var_id === parseInt(variantId));
        
        if(existingIndex  == -1) {
          isIncart = 0;
        } else {
          window.totalUserBoxItemsCount = 1;
        }
      
      // Append product card to the container
      // Added Image Popup on BYOH Boxes Added by velocity 29-07-2025
      $('#product-card2').append(`
        <div class="${needToHide} ${showBox} product-card bgs ${expressClass} ${standardClass} ${hideClass} ${kolkata_prd}" data-boxquant="${boxMaxQuantFinal}" data_mumbai="${data_mumbai}" data_kolkata="${data_kolkata}" data_gurgaon="${data_gurgaon}" data_delhi="${data_delhi}" data_bangalore="${data_bangalore}">
          <p id="${ variantId }_tag" class="product_tag">${ product?.node.tags }</p>
          <div class="product-img">
            <img src="${cardProdImg}" onclick="openProductPopup('${boxImages}')" alt="${product?.node?.handle}">
          </div>
          <h4 class="product-card-title">${product?.node.title} <br> <span class="box_limit">(Ideal for ${boxMaxQuantFinal} Items)</span></h4>
          <h5 class="price" style="display:none;"><span>&#x20b9;${price}</span></h5>
           ${priceHtml}
          <div class="addToBag">
            <button type="button" onclick="addtocart(${variantId}, ${productId}, 0, 1, 0)" class="add_${variantId} prodAddToBagBut" ${isInCart ? 'style="display:none;"' : ''}> ADD</button>
            <button type="button" onclick="removeFromCart(${variantId}, ${productId}, 0, 1, 0)" class="remove_${variantId} prodRemoveFromBagBut" ${isInCart ? '' : 'style="display:none;"'}> REMOVE</button>
            <div class="loader loader_${productId}" style="display:none;"> <span></span> </div>
          </div>
        </div>
      `);
    }
     // }
  });

  // Dispatch event and run additional scripts
  orderscroller();
  let allProductsLoaded = new CustomEvent("allProductsLoaded", {
    detail: { status: 200 },
  });
  document.dispatchEvent(allProductsLoaded);
}

  
async function displayAddonsProducts(){

   // Fetch cart data
    const cartData = await fetch('/cart.js').then(response => response.json());
    const cartQuantities = {};

  // CP-28-11 - comment start
    // Map cart quantities by variant ID
    cartData.items.forEach(item => {
        cartQuantities[item.variant_id] = item.quantity;
    });
    
  
    const loaderr = document.querySelector('.loaderr');
    loaderr.style.display = 'block';
    let getLocation = localStorage.getItem("location");
    // sleeves
    const sleevesData = await fetchProductsByCollectionId(localStorage.getItem("byoh_sleeve_collection_id"));
    const sleeves = sleevesData.data.collectionByHandle.products.edges;
    //const sleeves = hamperCollectionData.addons_product_collection_sleeves[0];
    sleeves.forEach(product => {
        if(product.node.tags.includes(getLocation)) {
      const inventoryMetafields = {};
          // Assuming `product.metafields` is the array of metafields
          product.node.metafields.forEach((metafield) => {
              if (metafield && ["bangalore_inventory", "mumbai_inventory", "gurgaon_inventory", "kolkata_inventory"].includes(metafield.key)) {
                  inventoryMetafields[metafield.key] = metafield.value;
              } else if (metafield === null) {
                  console.warn("Metafield is null. Skipping...");
              }
          });
          
          console.log(inventoryMetafields);

          const currentLocation = localStorage.getItem('location');
          let isAvailable = false;

          var needToHide = '';
            var quantityInput = $('#quantity_filter').val(); // Get input value
            var quantity_required = parseInt(quantityInput); // Convert to integer
                  
            if (currentLocation === 'location-kolkata' && parseInt(inventoryMetafields['kolkata_inventory']) > 0) {
                isAvailable = true;
              if(parseInt(inventoryMetafields['kolkata_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-bangalore' && parseInt(inventoryMetafields['bangalore_inventory']) > 0) {
               isAvailable = true;
              if(parseInt(inventoryMetafields['bangalore_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-mumbai' && parseInt(inventoryMetafields['mumbai_inventory']) > 0){
              isAvailable = true;
              if(parseInt(inventoryMetafields['mumbai_inventory'])<quantity_required){
                needToHide = 'hidden';
              }
            } else if (currentLocation === 'location-gurgaon' && parseInt(inventoryMetafields['gurgaon_inventory'])>0) {
              isAvailable = true;
              if(parseInt(inventoryMetafields['gurgaon_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            }
            
            // Set inventory data variables for product card attributes Added by Velocity 04-08-2025
            var data_mumbai = inventoryMetafields['mumbai_inventory'] || '';
            var data_kolkata = inventoryMetafields['kolkata_inventory'] || '';
            var data_gurgaon = inventoryMetafields['gurgaon_inventory'] || '';
            var data_delhi = inventoryMetafields['delhi_inventory'] || '';
            var data_bangalore = inventoryMetafields['bangalore_inventory'] || '';

    if (isAvailable) {
      const priceHtml = getPriceHtml(product.node);
      const cardProdImg = product.node.images.edges[0]?.node.src || 'https://placehold.jp/330x330.png'; // Default to placeholder
      const productVariant = product.node.variants.edges[0]?.node;
      const price = productVariant.price.amount ? productVariant.price.amount : 'N/A';
      const variantId = productVariant ? productVariant.id.match(/\d+$/)[0] : null; // Extract numeric part
      const productId = product.node.id.match(/\d+$/)[0]; // Extract numeric part
      const productTagsData = product?.node?.tags || [];
      const tagsString = productTagsData.join(", ");

    
        let sleeveProdFlag = 0;

        // Check if the product is already loaded
        if (!loadedSleeveProdIds.includes(product?.node?.id)) {
            loadedSleeveProdIds.push(product?.node?.id);
            sleeveProdFlag = 1;
        }

        if (sleeveProdFlag !== 0) {
            // Determine location-based classes
            let expressClass = tagsString?.toLowerCase().includes(getLocation) ? "expressdel" : "";
            let standardClass = tagsString?.toLowerCase().includes("location-roi") ? "standarddel" : "";
            let hideClass = "d-none";
            let kolkata_prd = tagsString.toLowerCase().includes("location-kolkata") || tagsString.toLowerCase().includes("kolkata-poc") ? "kolkata_prd" : "";

            // Fetch cart quantity
            const cartQuantity = cartQuantities[variantId] || 0; // Default to 0 if not in cart
            var isInCart = cartQuantity > 0;
            var existingIndex =  selectedItem.findIndex(selected => selected.item_var_id === parseInt(variantId));
            
            if(existingIndex  == -1) {
              isIncart = 0;
            }
            // Button visibility logic
            const addBagStyle = isInCart ? 'style="display:none;"' : '';
            const removeBagStyle = isInCart ? '' : 'style="display:none;"';

            // Append the product card
            $('#product-card3').append(`
                <div class="${needToHide} product-card ${expressClass} ${standardClass} ${hideClass} ${kolkata_prd}" data_mumbai="${data_mumbai}" data_kolkata="${data_kolkata}" data_gurgaon="${data_gurgaon}" data_delhi="${data_delhi}" data_bangalore="${data_bangalore}">
                <p id="${ variantId }_tag" class="product_tag">${ product?.node.tags }</p>
                    <div class="product-img">
                        <img src="${cardProdImg}" alt="${product?.node?.handle}">
                    </div>
                    <h4 class="product-card-title">${product?.node?.title}</h4>
                    <h5 class="price" style="display:none;"><span>&#x20b9;${price}</span></h5>
                   ${priceHtml}
                    <div class="addToBag">
                        <button type='button' onclick="addtocart(${variantId}, ${productId}, 0, 0, 1)" class="add_${variantId} prodAddToBagBut" ${addBagStyle}>ADD</button>
                        <button type='button' onclick="removeFromCart(${variantId}, ${productId}, 0, 0, 1)" class="remove_${variantId} prodRemoveFromBagBut" ${removeBagStyle}>REMOVE</button>
                        <div class="loader loader_${product?.node?.id}" style="display:none;"> <span></span> </div>
                    </div>
                </div>
            `);
        }
    }
        }
});

    // cards
    //const cards = hamperCollectionData.addons_product_collection_cards[0];
  const cardsData = await fetchProductsByCollectionId(localStorage.getItem("byoh_cards_collection_id"));
  const cards = cardsData.data.collectionByHandle.products.edges;
    cards.forEach(product => {
        if(product.node.tags.includes(getLocation)) {
      const inventoryMetafields = {};
          // Assuming `product.metafields` is the array of metafields
          product.node.metafields.forEach((metafield) => {
              if (metafield && ["bangalore_inventory", "mumbai_inventory", "gurgaon_inventory", "kolkata_inventory"].includes(metafield.key)) {
                  inventoryMetafields[metafield.key] = metafield.value;
              } else if (metafield === null) {
                  console.warn("Metafield is null. Skipping...");
              }
          });
          
          console.log(inventoryMetafields);

          const currentLocation = localStorage.getItem('location');
          let isAvailable = false;

          var needToHide = '';
            var quantityInput = $('#quantity_filter').val(); // Get input value
            var quantity_required = parseInt(quantityInput); // Convert to integer
                  
            if (currentLocation === 'location-kolkata' && parseInt(inventoryMetafields['kolkata_inventory']) > 0) {
                isAvailable = true;
              if(parseInt(inventoryMetafields['kolkata_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-bangalore' && parseInt(inventoryMetafields['bangalore_inventory']) > 0) {
               isAvailable = true;
              if(parseInt(inventoryMetafields['bangalore_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-mumbai' && parseInt(inventoryMetafields['mumbai_inventory']) > 0){
              isAvailable = true;
              if(parseInt(inventoryMetafields['mumbai_inventory'])<quantity_required){
                needToHide = 'hidden';
              }
            } else if (currentLocation === 'location-gurgaon' && parseInt(inventoryMetafields['gurgaon_inventory'])>0) {
              isAvailable = true;
              if(parseInt(inventoryMetafields['gurgaon_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            }
            
            // Set inventory data variables for product card attributes  Added by Velocity 04-08-2025
            var data_mumbai = inventoryMetafields['mumbai_inventory'] || '';
            var data_kolkata = inventoryMetafields['kolkata_inventory'] || '';
            var data_gurgaon = inventoryMetafields['gurgaon_inventory'] || '';
            var data_delhi = inventoryMetafields['delhi_inventory'] || '';
            var data_bangalore = inventoryMetafields['bangalore_inventory'] || '';

    if (isAvailable) {
      const priceHtml = getPriceHtml(product.node);
    const cardProdImg = product.node.images.edges[0]?.node.src || 'https://placehold.jp/330x330.png'; // Default to placeholder
    const productVariant = product.node.variants.edges[0]?.node;
    const price = productVariant.price.amount ? productVariant.price.amount : 'N/A';
    const variantId = productVariant ? productVariant.id.match(/\d+$/)[0] : null; // Extract numeric part
    const productId = product.node.id.match(/\d+$/)[0]; // Extract numeric part
    const productTagsData = product?.node?.tags || [];
    const tagsString = productTagsData.join(", ");

        let cardsProdFlag = 0;

        // Check if the product is already loaded
        if (!loadedCardsProdIds.includes(product?.node?.id)) {
            loadedCardsProdIds.push(product?.node?.id);
            cardsProdFlag = 1;
        }

        if (cardsProdFlag !== 0) {
            // Determine location-based classes
            let expressClass = tagsString.toLowerCase().includes(getLocation) ? "expressdel" : "";
            let standardClass = tagsString.toLowerCase().includes("location-roi") ? "standarddel" : "";
            let hideClass = "d-none";
            let kolkata_prd = tagsString.toLowerCase().includes("location-kolkata") || tagsString.toLowerCase().includes("kolkata-poc") ? "kolkata_prd" : "";

            // Fetch cart quantity
            const cartQuantity = cartQuantities[variantId] || 0; // Default to 0 if not in cart
            
            var isInCart = 0;
            var existingIndex =  selectedItem.findIndex(selected => selected.item_var_id === parseInt(variantId));
            if(existingIndex  > -1) {
              hideClass = '';
              isInCart = cartQuantity > 0;
            }
            // Button visibility logic
          
            const addBagStyle = isInCart ? 'style="display:none;"' : '';
            const removeBagStyle = isInCart ? '' : 'style="display:none;"';

            // Append the product card
	    // Append all the products of sleeve,bows, and card in the single page added by velocity 29-07-2025
            $('#product-card3').append(`
                <div class="${needToHide} product-card ${expressClass} ${standardClass} ${hideClass} ${kolkata_prd}" data_mumbai="${data_mumbai}" data_kolkata="${data_kolkata}" data_gurgaon="${data_gurgaon}" data_delhi="${data_delhi}" data_bangalore="${data_bangalore}">
                <p id="${ variantId }_tag" class="product_tag">${ product?.node.tags }</p>
                    <div class="product-img">
                        <img src="${cardProdImg}" alt="${product?.node?.handle}">
                    </div>
                    <h4 class="product-card-title">${product?.node?.title}</h4>
                    <h5 class="price" style="display:none;"><span>&#x20b9;${price}</span></h5>
                    ${priceHtml}
                    <div class="addToBag">
                        <button type='button' onclick="addtocart(${variantId}, ${productId}, 0, 0, 1, 1)" class="add_${variantId} prodAddToBagBut" ${addBagStyle}>ADD</button>
                        <button type='button' onclick="removeFromCart(${variantId}, ${productId}, 0, 0, 1, 1)" class="remove_${variantId} prodRemoveFromBagBut" ${removeBagStyle}>REMOVE</button>
                        <div class="loader loader_${product?.node?.id}" style="display:none;"> <span></span> </div>
                    </div>
                </div>
            `);
        }
    }
        }
});

    // bows
  //  const bows = hamperCollectionData.addons_product_collection_bows[0];
  const bowsData = await fetchProductsByCollectionId(localStorage.getItem("byoh_bow_collection_id"));
  const bows = bowsData.data.collectionByHandle.products.edges;
  
   bows.forEach(product => {
       if(product.node.tags.includes(getLocation)) {
     const inventoryMetafields = {};
          // Assuming `product.metafields` is the array of metafields
          product.node.metafields.forEach((metafield) => {
              if (metafield && ["bangalore_inventory", "mumbai_inventory", "gurgaon_inventory", "kolkata_inventory"].includes(metafield.key)) {
                  inventoryMetafields[metafield.key] = metafield.value;
              } else if (metafield === null) {
                  console.warn("Metafield is null. Skipping...");
              }
          });
          
          console.log(inventoryMetafields);

          const currentLocation = localStorage.getItem('location');
          let isAvailable = false;

           var needToHide = '';
            var quantityInput = $('#quantity_filter').val(); // Get input value
            var quantity_required = parseInt(quantityInput); // Convert to integer
                  
            if (currentLocation === 'location-kolkata' && parseInt(inventoryMetafields['kolkata_inventory']) > 0) {
                isAvailable = true;
              if(parseInt(inventoryMetafields['kolkata_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-bangalore' && parseInt(inventoryMetafields['bangalore_inventory']) > 0) {
               isAvailable = true;
              if(parseInt(inventoryMetafields['bangalore_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            } else if(currentLocation === 'location-mumbai' && parseInt(inventoryMetafields['mumbai_inventory']) > 0){
              isAvailable = true;
              if(parseInt(inventoryMetafields['mumbai_inventory'])<quantity_required){
                needToHide = 'hidden';
              }
            } else if (currentLocation === 'location-gurgaon' && parseInt(inventoryMetafields['gurgaon_inventory'])>0) {
              isAvailable = true;
              if(parseInt(inventoryMetafields['gurgaon_inventory']) <quantity_required){
                needToHide = 'hidden';
              }
            }
            
            // Set inventory data variables for product card attributes  Added by Velocity 04-08-2025
            var data_mumbai = inventoryMetafields['mumbai_inventory'] || '';
            var data_kolkata = inventoryMetafields['kolkata_inventory'] || '';
            var data_gurgaon = inventoryMetafields['gurgaon_inventory'] || '';
            var data_delhi = inventoryMetafields['delhi_inventory'] || '';
            var data_bangalore = inventoryMetafields['bangalore_inventory'] || '';

    if (isAvailable) {
      const priceHtml = getPriceHtml(product.node);
    const cardProdImg = product.node.images.edges[0]?.node.src || 'https://placehold.jp/330x330.png'; // Default to placeholder
    const productVariant = product.node.variants.edges[0]?.node;
    const price = productVariant.price.amount ? productVariant.price.amount : 'N/A';
    const variantId = productVariant ? productVariant.id.match(/\d+$/)[0] : null; // Extract numeric part
    const productId = product.node.id.match(/\d+$/)[0]; // Extract numeric part
    const productTagsData = product?.node?.tags || [];
    const tagsString = productTagsData.join(", ");

    // if (product?.node?.status === "ACTIVE") {
        let bowsProdFlag = 0;

        // Check if the product is already loaded
        if (!loadedBowsProdIds.includes(product?.node?.id)) {
            loadedBowsProdIds.push(product?.node?.id);
            bowsProdFlag = 1;
        }

        if (bowsProdFlag !== 0) {
            // Determine location-based classes
            let expressClass = tagsString.toLowerCase().includes(getLocation) ? "expressdel" : "";
            let standardClass = tagsString.toLowerCase().includes("location-roi") ? "standarddel" : "";
            let hideClass = "d-none";
            let kolkata_prd = tagsString.toLowerCase().includes("location-kolkata") || tagsString.toLowerCase().includes("kolkata-poc") ? "kolkata_prd" : "";

            // Fetch cart quantity
            const cartQuantity = cartQuantities[variantId] || 0; // Default to 0 if not in cart
            var isInCart = 0;
            var existingIndex =  selectedItem.findIndex(selected => selected.item_var_id === parseInt(variantId));
            
            if(existingIndex > -1) {
              hideClass = '';
              isInCart = cartQuantity > 0;
            }

            // Button visibility logic
            const addBagStyle = isInCart ? 'style="display:none;"' : '';
            const removeBagStyle = isInCart ? '' : 'style="display:none;"';

            // Append the product card
	    	    // Append all the products of sleeve,bows, and card in the single page added by velocity 29-07-2025
            $('#product-card3').append(`
                <div class="${needToHide} product-card ${expressClass} ${standardClass} ${hideClass} ${kolkata_prd}" data_mumbai="${data_mumbai}" data_kolkata="${data_kolkata}" data_gurgaon="${data_gurgaon}" data_delhi="${data_delhi}" data_bangalore="${data_bangalore}">
                <p id="${ variantId }_tag" class="product_tag">${ product?.node.tags }</p>
                    <div class="product-img">
                        <img src="${cardProdImg}" alt="${product?.node?.handle}">
                    </div>
                    <h4 class="product-card-title">${product?.node?.title}</h4>
                    <h5 class="price" style="display:none;"><span>&#x20b9;${price}</span></h5>
                     ${priceHtml}
                    <div class="addToBag">
                        <button type='button' onclick="addtocart(${variantId}, ${productId}, 0, 0, 1)" class="add_${variantId} prodAddToBagBut" ${addBagStyle}>ADD</button>
                        <button type='button' onclick="removeFromCart(${variantId}, ${productId}, 0, 0, 1)" class="remove_${variantId} prodRemoveFromBagBut" ${removeBagStyle}>REMOVE</button>
                        <div class="loader loader_${productId}" style="display:none;"> <span></span> </div>
                    </div>
                </div>
            `);
        }
    }
       }
});


  if(sleeves && cards && bows){
  loaderr.style.display = 'none';
  }
    orderscroller();
    $(".byoh-addon-cards").click();
    let allProductsLoaded = new CustomEvent("allProductsLoaded", {
      detail: {
        status: 200
      }
    });
    document.dispatchEvent(allProductsLoaded);
}
  window.addEventListener('scroll', function () {
    // debugger;
  const footer = document.querySelector('.step-4-footer');
  const scrollPosition = window.scrollY || window.pageYOffset;

  // Adjust this threshold based on where you want to trigger stickiness
  if (scrollPosition > 50) {
    footer.style.display= 'fixed';
  } else {
    footer.style.display= 'block';
  }
});

</script>
